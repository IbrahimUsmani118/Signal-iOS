//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoLinkPreview in Backup.proto
import Wire

public struct BackupProtoLinkPreview {

    public var url: String
    @ProtoDefaulted
    public var title: String?
    @ProtoDefaulted
    public var image: BackupProtoFilePointer?
    @ProtoDefaulted
    public var description_: String?
    @ProtoDefaulted
    public var date: UInt64?
    public var unknownFields: UnknownFields = .init()

    public init(url: String, configure: (inout Self) -> Swift.Void = { _ in }) {
        self.url = url
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoLinkPreview : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoLinkPreview : Hashable {
}
#endif

extension BackupProtoLinkPreview : Sendable {
}

extension BackupProtoLinkPreview : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoLinkPreview"
    }

}

extension BackupProtoLinkPreview : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var url: String = ""
        var title: String? = nil
        var image: BackupProtoFilePointer? = nil
        var description_: String? = nil
        var date: UInt64? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: url = try protoReader.decode(String.self)
            case 2: title = try protoReader.decode(String.self)
            case 3: image = try protoReader.decode(BackupProtoFilePointer.self)
            case 4: description_ = try protoReader.decode(String.self)
            case 5: date = try protoReader.decode(UInt64.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.url = url
        self._title.wrappedValue = title
        self._image.wrappedValue = image
        self._description_.wrappedValue = description_
        self._date.wrappedValue = date
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.url)
        try protoWriter.encode(tag: 2, value: self.title)
        try protoWriter.encode(tag: 3, value: self.image)
        try protoWriter.encode(tag: 4, value: self.description_)
        try protoWriter.encode(tag: 5, value: self.date)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoLinkPreview : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.url = try container.decode(String.self, forKey: "url")
        self._title.wrappedValue = try container.decodeIfPresent(String.self, forKey: "title")
        self._image.wrappedValue = try container.decodeIfPresent(BackupProtoFilePointer.self, forKey: "image")
        self._description_.wrappedValue = try container.decodeIfPresent(String.self, forKey: "description")
        self._date.wrappedValue = try container.decodeIfPresent(stringEncoded: UInt64.self, forKey: "date")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.url.isEmpty {
            try container.encode(self.url, forKey: "url")
        }
        try container.encodeIfPresent(self.title, forKey: "title")
        try container.encodeIfPresent(self.image, forKey: "image")
        try container.encodeIfPresent(self.description_, forKey: "description")
        try container.encodeIfPresent(stringEncoded: self.date, forKey: "date")
    }

}
#endif
