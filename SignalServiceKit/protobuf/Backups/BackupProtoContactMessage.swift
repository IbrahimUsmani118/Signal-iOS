//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoContactMessage in Backup.proto
import Wire

public struct BackupProtoContactMessage {

    public var contact: [BackupProtoContactAttachment] = []
    public var reactions: [BackupProtoReaction] = []
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoContactMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoContactMessage : Hashable {
}
#endif

extension BackupProtoContactMessage : Sendable {
}

extension BackupProtoContactMessage : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoContactMessage {
        BackupProtoContactMessage()
    }
}

extension BackupProtoContactMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoContactMessage"
    }

}

extension BackupProtoContactMessage : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var contact: [BackupProtoContactAttachment] = []
        var reactions: [BackupProtoReaction] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: try protoReader.decode(into: &contact)
            case 2: try protoReader.decode(into: &reactions)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.contact = contact
        self.reactions = reactions
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.contact)
        try protoWriter.encode(tag: 2, value: self.reactions)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoContactMessage : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.contact = try container.decodeProtoArray(BackupProtoContactAttachment.self, forKey: "contact")
        self.reactions = try container.decodeProtoArray(BackupProtoReaction.self, forKey: "reactions")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.contact.isEmpty {
            try container.encodeProtoArray(self.contact, forKey: "contact")
        }
        if includeDefaults || !self.reactions.isEmpty {
            try container.encodeProtoArray(self.reactions, forKey: "reactions")
        }
    }

}
#endif
