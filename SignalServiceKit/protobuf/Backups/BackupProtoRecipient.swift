//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoRecipient in Backup.proto
import Wire

public struct BackupProtoRecipient {

    /**
     * generated id for reference only within this file
     */
    public var id: UInt64
    public var destination: Destination?
    public var unknownFields: UnknownFields = .init()

    public init(id: UInt64, configure: (inout Self) -> Swift.Void = { _ in }) {
        self.id = id
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoRecipient : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoRecipient : Hashable {
}
#endif

extension BackupProtoRecipient : Sendable {
}

extension BackupProtoRecipient : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoRecipient"
    }

}

extension BackupProtoRecipient : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var id: UInt64 = 0
        var destination: Destination? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: id = try protoReader.decode(UInt64.self)
            case 2: destination = .contact(try protoReader.decode(BackupProtoContact.self))
            case 3: destination = .group(try protoReader.decode(BackupProtoGroup.self))
            case 4: destination = .distributionList(try protoReader.decode(BackupProtoDistributionList.self))
            case 5: destination = .selfRecipient(try protoReader.decode(BackupProtoSelfRecipient.self))
            case 6: destination = .releaseNotes(try protoReader.decode(BackupProtoReleaseNotes.self))
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.id = id
        self.destination = destination
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.id)
        if let destination = self.destination {
            try destination.encode(to: protoWriter)
        }
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoRecipient : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.id = try container.decode(stringEncoded: UInt64.self, forKey: "id")
        if let contact = try container.decodeIfPresent(BackupProtoContact.self, forKey: "contact") {
            self.destination = .contact(contact)
        } else if let group = try container.decodeIfPresent(BackupProtoGroup.self, forKey: "group") {
            self.destination = .group(group)
        } else if let distributionList = try container.decodeIfPresent(BackupProtoDistributionList.self, forKey: "distributionList") {
            self.destination = .distributionList(distributionList)
        } else if let selfRecipient = try container.decodeIfPresent(BackupProtoSelfRecipient.self, forKey: "selfRecipient") {
            self.destination = .selfRecipient(selfRecipient)
        } else if let releaseNotes = try container.decodeIfPresent(BackupProtoReleaseNotes.self, forKey: "releaseNotes") {
            self.destination = .releaseNotes(releaseNotes)
        } else {
            self.destination = nil
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || self.id != 0 {
            try container.encode(stringEncoded: self.id, forKey: "id")
        }
        switch self.destination {
        case .contact(let contact): try container.encode(contact, forKey: "contact")
        case .group(let group): try container.encode(group, forKey: "group")
        case .distributionList(let distributionList): try container.encode(distributionList, forKey: "distributionList")
        case .selfRecipient(let selfRecipient): try container.encode(selfRecipient, forKey: "selfRecipient")
        case .releaseNotes(let releaseNotes): try container.encode(releaseNotes, forKey: "releaseNotes")
        case Optional.none: break
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoRecipient
 */
extension BackupProtoRecipient {

    public enum Destination {

        case contact(BackupProtoContact)
        case group(BackupProtoGroup)
        case distributionList(BackupProtoDistributionList)
        case selfRecipient(BackupProtoSelfRecipient)
        case releaseNotes(BackupProtoReleaseNotes)

        fileprivate func encode(to protoWriter: ProtoWriter) throws {
            switch self {
            case .contact(let contact): try protoWriter.encode(tag: 2, value: contact)
            case .group(let group): try protoWriter.encode(tag: 3, value: group)
            case .distributionList(let distributionList): try protoWriter.encode(tag: 4, value: distributionList)
            case .selfRecipient(let selfRecipient): try protoWriter.encode(tag: 5, value: selfRecipient)
            case .releaseNotes(let releaseNotes): try protoWriter.encode(tag: 6, value: releaseNotes)
            }
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoRecipient.Destination : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoRecipient.Destination : Hashable {
}
#endif

extension BackupProtoRecipient.Destination : Sendable {
}
