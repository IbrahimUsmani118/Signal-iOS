//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoGroupAdminStatusUpdate in Backup.proto
import Foundation
import Wire

public struct BackupProtoGroupAdminStatusUpdate {

    @ProtoDefaulted
    public var updaterAci: Foundation.Data?
    /**
     * The aci who had admin status granted or revoked.
     */
    public var memberAci: Foundation.Data
    public var wasAdminStatusGranted: Bool
    public var unknownFields: UnknownFields = .init()

    public init(
        memberAci: Foundation.Data,
        wasAdminStatusGranted: Bool,
        configure: (inout Self) -> Swift.Void = { _ in }
    ) {
        self.memberAci = memberAci
        self.wasAdminStatusGranted = wasAdminStatusGranted
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupAdminStatusUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupAdminStatusUpdate : Hashable {
}
#endif

extension BackupProtoGroupAdminStatusUpdate : Sendable {
}

extension BackupProtoGroupAdminStatusUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroupAdminStatusUpdate"
    }

}

extension BackupProtoGroupAdminStatusUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var updaterAci: Foundation.Data? = nil
        var memberAci: Foundation.Data = .init()
        var wasAdminStatusGranted: Bool = false

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: updaterAci = try protoReader.decode(Foundation.Data.self)
            case 2: memberAci = try protoReader.decode(Foundation.Data.self)
            case 3: wasAdminStatusGranted = try protoReader.decode(Bool.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._updaterAci.wrappedValue = updaterAci
        self.memberAci = memberAci
        self.wasAdminStatusGranted = wasAdminStatusGranted
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.updaterAci)
        try protoWriter.encode(tag: 2, value: self.memberAci)
        try protoWriter.encode(tag: 3, value: self.wasAdminStatusGranted)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroupAdminStatusUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._updaterAci.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "updaterAci")
        self.memberAci = try container.decode(stringEncoded: Foundation.Data.self, forKey: "memberAci")
        self.wasAdminStatusGranted = try container.decode(Bool.self, forKey: "wasAdminStatusGranted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        try container.encodeIfPresent(stringEncoded: self.updaterAci, forKey: "updaterAci")
        if includeDefaults || !self.memberAci.isEmpty {
            try container.encode(stringEncoded: self.memberAci, forKey: "memberAci")
        }
        if includeDefaults || self.wasAdminStatusGranted != false {
            try container.encode(self.wasAdminStatusGranted, forKey: "wasAdminStatusGranted")
        }
    }

}
#endif
