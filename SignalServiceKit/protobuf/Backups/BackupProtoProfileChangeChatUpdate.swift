//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoProfileChangeChatUpdate in Backup.proto
import Wire

public struct BackupProtoProfileChangeChatUpdate {

    public var previousName: String
    public var newName: String
    public var unknownFields: UnknownFields = .init()

    public init(previousName: String, newName: String) {
        self.previousName = previousName
        self.newName = newName
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoProfileChangeChatUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoProfileChangeChatUpdate : Hashable {
}
#endif

extension BackupProtoProfileChangeChatUpdate : Sendable {
}

extension BackupProtoProfileChangeChatUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoProfileChangeChatUpdate"
    }

}

extension BackupProtoProfileChangeChatUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var previousName: String = ""
        var newName: String = ""

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: previousName = try protoReader.decode(String.self)
            case 2: newName = try protoReader.decode(String.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.previousName = previousName
        self.newName = newName
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.previousName)
        try protoWriter.encode(tag: 2, value: self.newName)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoProfileChangeChatUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.previousName = try container.decode(String.self, forKey: "previousName")
        self.newName = try container.decode(String.self, forKey: "newName")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.previousName.isEmpty {
            try container.encode(self.previousName, forKey: "previousName")
        }
        if includeDefaults || !self.newName.isEmpty {
            try container.encode(self.newName, forKey: "newName")
        }
    }

}
#endif
