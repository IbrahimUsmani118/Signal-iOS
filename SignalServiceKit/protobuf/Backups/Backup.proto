//
// Copyright 2014 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

syntax = "proto3";

package BackupProto;

message BackupProtoBackupInfo {
  uint64 version = 1;
  uint64 backupTimeMs = 2;
}

message BackupProtoFrame {
  oneof item {
    BackupProtoAccountData account = 1;
    BackupProtoRecipient recipient = 2;
    BackupProtoChat chat = 3;
    BackupProtoChatItem chatItem = 4;
    BackupProtoCall call = 5;
    BackupProtoStickerPack stickerPack = 6;
  }
}

message BackupProtoAccountData {
  enum BackupProtoPhoneNumberSharingMode {
    UNKNOWN = 0;
    EVERYBODY = 1;
    NOBODY = 2;
  }

  message BackupProtoUsernameLink {
    enum BackupProtoColor {
      UNKNOWN = 0;
      BLUE = 1;
      WHITE = 2;
      GREY = 3;
      OLIVE = 4;
      GREEN = 5;
      ORANGE = 6;
      PINK = 7;
      PURPLE = 8;
    }

    bytes entropy = 1;  // 32 bytes of entropy used for encryption
    bytes serverId = 2; // 16 bytes of encoded UUID provided by the server
    optional BackupProtoColor color = 3;
  }

  message BackupProtoAccountSettings {
    bool readReceipts = 1;
    bool sealedSenderIndicators = 2;
    bool typingIndicators = 3;
    bool linkPreviews = 4;
    bool notDiscoverableByPhoneNumber = 5;
    bool preferContactAvatars = 6;
    uint32 universalExpireTimer = 7; // 0 means no universal expire timer.
    repeated string preferredReactionEmoji = 8;
    bool displayBadgesOnProfile = 9;
    bool keepMutedChatsArchived = 10;
    bool hasSetMyStoriesPrivacy = 11;
    bool hasViewedOnboardingStory = 12;
    bool storiesDisabled = 13;
    optional bool storyViewReceiptsEnabled = 14;
    bool hasSeenGroupStoryEducationSheet = 15;
    bool hasCompletedUsernameOnboarding = 16;
    optional BackupProtoPhoneNumberSharingMode phoneNumberSharingMode = 17;
  }

  bytes profileKey = 1;
  optional string username = 2;
  BackupProtoUsernameLink usernameLink = 3;
  string givenName = 4;
  string familyName = 5;
  string avatarUrlPath = 6;
  bytes subscriberId = 7;
  string subscriberCurrencyCode = 8;
  bool subscriptionManuallyCancelled = 9;
  BackupProtoAccountSettings accountSettings = 10;
}

message BackupProtoRecipient {
  uint64 id = 1; // generated id for reference only within this file
  oneof destination {
    BackupProtoContact contact = 2;
    BackupProtoGroup group = 3;
    BackupProtoDistributionList distributionList = 4;
    BackupProtoSelfRecipient selfRecipient = 5;
    BackupProtoReleaseNotes releaseNotes = 6;
  }
}

message BackupProtoContact {
  enum BackupProtoRegistered {
    UNKNOWN = 0;
    REGISTERED = 1;
    NOT_REGISTERED = 2;
  }

  optional bytes aci = 1; // should be 16 bytes
  optional bytes pni = 2; // should be 16 bytes
  optional string username = 3;
  optional uint64 e164 = 4;
  bool blocked = 5;
  bool hidden = 6;
  optional BackupProtoRegistered registered = 7;
  uint64 unregisteredTimestamp = 8;
  optional bytes profileKey = 9;
  bool profileSharing = 10;
  optional string profileGivenName = 11;
  optional string profileFamilyName = 12;
  bool hideStory = 13;
}

message BackupProtoGroup {
  enum BackupProtoStorySendMode {
    DEFAULT = 0;
    DISABLED = 1;
    ENABLED = 2;
  }

  bytes masterKey = 1;
  bool whitelisted = 2;
  bool hideStory = 3;
  optional BackupProtoStorySendMode storySendMode = 4;
}

message BackupProtoSelfRecipient {}

message BackupProtoReleaseNotes {}

message BackupProtoChat {
  uint64 id = 1; // generated id for reference only within this file
  uint64 recipientId = 2;
  bool archived = 3;
  uint32 pinnedOrder = 4; // 0 = unpinned, otherwise chat is considered pinned and will be displayed in ascending order
  uint64 expirationTimerMs = 5; // 0 = no expire timer.
  uint64 muteUntilMs = 6;
  bool markedUnread = 7;
  bool dontNotifyForMentionsIfMuted = 8;
  optional BackupProtoFilePointer wallpaper = 9;
}

message BackupProtoDistributionList {
  enum BackupProtoPrivacyMode {
    UNKNOWN = 0;
    ONLY_WITH = 1;
    ALL_EXCEPT = 2;
    ALL = 3;
  }

  string name = 1;
  bytes distributionId = 2; // distribution list ids are uuids
  bool allowReplies = 3;
  uint64 deletionTimestamp = 4;
  optional BackupProtoPrivacyMode privacyMode = 5;
  repeated uint64 memberRecipientIds = 6; // generated recipient id
}

message BackupProtoIdentity {
  bytes serviceId = 1;
  bytes identityKey = 2;
  uint64 timestamp = 3;
  bool firstUse = 4;
  bool verified = 5;
  bool nonblockingApproval = 6;
}

message BackupProtoCall {
  enum BackupProtoType {
    UNKNOWN_TYPE = 0;
    AUDIO_CALL = 1;
    VIDEO_CALL = 2;
    GROUP_CALL = 3;
    AD_HOC_CALL = 4;
  }

  enum BackupProtoEvent {
    UNKNOWN_EVENT = 0;
    OUTGOING = 1; // 1:1 calls only
    ACCEPTED = 2; // 1:1 and group calls. Group calls: You accepted a ring.
    NOT_ACCEPTED = 3; // 1:1 calls only,
    MISSED = 4; // 1:1 and group. Group calls: The remote ring has expired or was cancelled by the ringer.
    DELETE = 5; // 1:1 and Group/Ad-Hoc Calls.
    GENERIC_GROUP_CALL = 6; // Group/Ad-Hoc Calls only. Initial state
    JOINED = 7; // Group Calls: User has joined the group call.
    DECLINED = 8; // Group Calls: If you declined a ring.
    OUTGOING_RING = 9; // Group Calls: If you are ringing a group.
  }

  uint64 callId = 1;
  uint64 conversationRecipientId = 2;
  optional BackupProtoType type = 3;
  bool outgoing = 4;
  uint64 timestamp = 5;
  optional uint64 ringerRecipientId = 6;
  optional BackupProtoEvent event = 7;
}

message BackupProtoChatItem {
  message BackupProtoIncomingMessageDetails {
    uint64 dateReceived = 1;
    uint64 dateServerSent = 2;
    bool read = 3;
  }

  message BackupProtoOutgoingMessageDetails {
    repeated BackupProtoSendStatus sendStatus = 1;
  }

  message BackupProtoDirectionlessMessageDetails {
  }

  uint64 chatId = 1;   // conversation id
  uint64 authorId = 2; // recipient id
  uint64 dateSent = 3;
  bool sealedSender = 4;
  optional uint64 expireStartDate = 5; // timestamp of when expiration timer started ticking down
  optional uint64 expiresInMs = 6; // how long timer of message is (ms)
  repeated BackupProtoChatItem revisions = 7; // ordered from oldest to newest
  bool sms = 8;

  oneof directionalDetails {
    BackupProtoIncomingMessageDetails incoming = 9;
    BackupProtoOutgoingMessageDetails outgoing = 10;
    BackupProtoDirectionlessMessageDetails directionless = 11;
  }

  oneof item {
    BackupProtoStandardMessage standardMessage = 13;
    BackupProtoContactMessage contactMessage = 14;
    BackupProtoVoiceMessage voiceMessage = 15;
    BackupProtoStickerMessage stickerMessage = 16;
    BackupProtoRemoteDeletedMessage remoteDeletedMessage = 17;
    BackupProtoChatUpdateMessage updateMessage = 18;
  }
}

message BackupProtoSendStatus {
  enum BackupProtoStatus {
    UNKNOWN = 0;
    FAILED = 1;
    PENDING = 2;
    SENT = 3;
    DELIVERED = 4;
    READ = 5;
    VIEWED = 6;
    SKIPPED = 7; // e.g. user in group was blocked, so we skipped sending to them
  }
  uint64 recipientId = 1;
  optional BackupProtoStatus deliveryStatus = 2;
  bool networkFailure = 3;
  bool identityKeyMismatch = 4;
  bool sealedSender = 5;
  uint64 lastStatusUpdateTimestamp = 6; // the time the status was last updated -- if from a receipt, it should be the sentTime of the receipt
}

message BackupProtoText {
  string body = 1;
  repeated BackupProtoBodyRange bodyRanges = 2;
}

message BackupProtoStandardMessage {
  optional BackupProtoQuote quote = 1;
  optional BackupProtoText text = 2;
  repeated BackupProtoFilePointer attachments = 3;
  repeated BackupProtoLinkPreview linkPreview = 4;
  optional BackupProtoFilePointer longText = 5;
  repeated BackupProtoReaction reactions = 6;
}

message BackupProtoContactMessage {
  repeated BackupProtoContactAttachment contact = 1;
  repeated BackupProtoReaction reactions = 2;
}

message BackupProtoContactAttachment {
  message BackupProtoName {
    optional string givenName = 1;
    optional string familyName = 2;
    optional string prefix = 3;
    optional string suffix = 4;
    optional string middleName = 5;
    optional string displayName = 6;
  }

  message BackupProtoPhone {
    enum BackupProtoType {
      UNKNOWN = 0;
      HOME = 1;
      MOBILE = 2;
      WORK = 3;
      CUSTOM = 4;
    }

    optional string value = 1;
    optional BackupProtoType type = 2;
    optional string label = 3;
  }

  message BackupProtoEmail {
    enum BackupProtoType {
      UNKNOWN = 0;
      HOME = 1;
      MOBILE = 2;
      WORK = 3;
      CUSTOM = 4;
    }

    optional string value = 1;
    optional BackupProtoType type = 2;
    optional string label = 3;
  }

  message BackupProtoPostalAddress {
    enum BackupProtoType {
      UNKNOWN = 0;
      HOME = 1;
      WORK = 2;
      CUSTOM = 3;
    }

    optional BackupProtoType type = 1;
    optional string label = 2;
    optional string street = 3;
    optional string pobox = 4;
    optional string neighborhood = 5;
    optional string city = 6;
    optional string region = 7;
    optional string postcode = 8;
    optional string country = 9;
  }

  message BackupProtoAvatar {
    BackupProtoFilePointer avatar = 1;
  }

  optional BackupProtoName name = 1;
  repeated BackupProtoPhone number = 3;
  repeated BackupProtoEmail email = 4;
  repeated BackupProtoPostalAddress address = 5;
  optional BackupProtoAvatar avatar = 6;
  optional string organization = 7;
}

message BackupProtoDocumentMessage {
  BackupProtoText text = 1;
  BackupProtoFilePointer document = 2;
  repeated BackupProtoReaction reactions = 3;
}

message BackupProtoVoiceMessage {
  optional BackupProtoQuote quote = 1;
  BackupProtoFilePointer audio = 2;
  repeated BackupProtoReaction reactions = 3;
}

message BackupProtoStickerMessage {
  BackupProtoSticker sticker = 1;
  repeated BackupProtoReaction reactions = 2;
}

// Tombstone for remote delete
message BackupProtoRemoteDeletedMessage {}

message BackupProtoSticker {
  bytes packId = 1;
  bytes packKey = 2;
  uint32 stickerId = 3;
  optional string emoji = 4;
}

message BackupProtoLinkPreview {
  string url = 1;
  optional string title = 2;
  optional BackupProtoFilePointer image = 3;
  optional string description = 4;
  optional uint64 date = 5;
}

message BackupProtoFilePointer {
  message BackupProtoBackupLocator {
    string mediaName = 1;
    uint32 cdnNumber = 2;
  }

  message BackupProtoAttachmentLocator {
    string cdnKey = 1;
    uint32 cdnNumber = 2;
    uint64 uploadTimestamp = 3;
  }

  message BackupProtoLegacyAttachmentLocator {
    fixed64 cdnId = 1;
  }

  // An attachment that was backed up without being downloaded.
  // Its MediaName should be generated as “{sender_aci}_{cdn_attachment_key}”,
  // but should eventually transition to a BackupLocator with mediaName
  // being the content hash once it is downloaded.
  message BackupProtoUndownloadedBackupLocator {
    bytes senderAci = 1;
    string cdnKey = 2;
    uint32 cdnNumber = 3;
  }

  enum BackupProtoFlags {
    VOICE_MESSAGE = 0;
    BORDERLESS = 1;
    GIF = 2;
  }

  oneof locator {
    BackupProtoBackupLocator backupLocator = 1;
    BackupProtoAttachmentLocator attachmentLocator= 2;
    BackupProtoLegacyAttachmentLocator legacyAttachmentLocator = 3;
    BackupProtoUndownloadedBackupLocator undownloadedBackupLocator = 4;
  }

  optional bytes key = 5;
  optional string contentType = 6;
  // Size of fullsize decrypted media blob in bytes.
  // Can be ignored if unset/unavailable.
  optional uint32 size = 7;
  optional bytes incrementalMac = 8;
  optional bytes incrementalMacChunkSize = 9;
  optional string fileName = 10;
  optional uint32 flags = 11;
  optional uint32 width = 12;
  optional uint32 height = 13;
  optional string caption = 14;
  optional string blurHash = 15;
}

message BackupProtoQuote {
  enum BackupProtoType {
    UNKNOWN = 0;
    NORMAL = 1;
    GIFTBADGE = 2;
  }

  message BackupProtoQuotedAttachment {
    optional string contentType = 1;
    optional string fileName = 2;
    optional BackupProtoFilePointer thumbnail = 3;
  }

  optional uint64 targetSentTimestamp = 1; // null if the target message could not be found at time of quote insert
  uint64 authorId = 2;
  optional string text = 3;
  repeated BackupProtoQuotedAttachment attachments = 4;
  repeated BackupProtoBodyRange bodyRanges = 5;
  optional BackupProtoType type = 6;
}

message BackupProtoBodyRange {
  enum BackupProtoStyle {
    NONE = 0;
    BOLD = 1;
    ITALIC = 2;
    SPOILER = 3;
    STRIKETHROUGH = 4;
    MONOSPACE = 5;
  }

  optional uint32 start = 1;
  optional uint32 length = 2;

  oneof associatedValue {
    bytes mentionAci = 3;
    BackupProtoStyle style = 4;
  }
}

message BackupProtoReaction {
  string emoji = 1;
  uint64 authorId = 2;
  uint64 sentTimestamp = 3;
  optional uint64 receivedTimestamp = 4;
  uint64 sortOrder = 5; // A higher sort order means that a reaction is more recent
}

message BackupProtoChatUpdateMessage {
  oneof update {
    BackupProtoSimpleChatUpdate simpleUpdate = 1;
    BackupProtoGroupChangeChatUpdate groupChange = 2;
    BackupProtoExpirationTimerChatUpdate expirationTimerChange = 3;
    BackupProtoProfileChangeChatUpdate profileChange = 4;
    BackupProtoThreadMergeChatUpdate threadMerge = 5;
    BackupProtoSessionSwitchoverChatUpdate sessionSwitchover = 6;
    BackupProtoCallChatUpdate callingMessage = 7;
  }
}

message BackupProtoCallChatUpdate {
  oneof call {
    uint64 callId = 1; // maps to id of call from call log
    BackupProtoIndividualCallChatUpdate callMessage = 2;
    BackupProtoGroupCallChatUpdate groupCall = 3;
  }
}

message BackupProtoIndividualCallChatUpdate {
  enum BackupProtoType {
    UNKNOWN = 0;
    INCOMING_AUDIO_CALL = 1;
    INCOMING_VIDEO_CALL = 2;
    OUTGOING_AUDIO_CALL = 3;
    OUTGOING_VIDEO_CALL = 4;
    MISSED_AUDIO_CALL = 5;
    MISSED_VIDEO_CALL = 6;
  }
}

message BackupProtoGroupCallChatUpdate {
  optional bytes startedCallAci = 1;
  uint64 startedCallTimestamp = 2;
  repeated bytes inCallAcis = 3;
}

message BackupProtoSimpleChatUpdate {
  enum BackupProtoType {
    UNKNOWN = 0;
    JOINED_SIGNAL = 1;
    IDENTITY_UPDATE = 2;
    IDENTITY_VERIFIED = 3;
    IDENTITY_DEFAULT = 4; // marking as unverified
    CHANGE_NUMBER = 5;
    BOOST_REQUEST = 6;
    END_SESSION = 7;
    CHAT_SESSION_REFRESH = 8;
    BAD_DECRYPT = 9;
    PAYMENTS_ACTIVATED = 10;
    PAYMENT_ACTIVATION_REQUEST = 11;
  }

  optional BackupProtoType type = 1;
}

message BackupProtoGroupDescriptionChatUpdate {
  string newDescription = 1;
}

// For 1:1 chat updates only.
// For group thread updates use GroupExpirationTimerUpdate.
message BackupProtoExpirationTimerChatUpdate {
  uint32 expiresInMs = 1; // 0 means the expiration timer was disabled
}

message BackupProtoProfileChangeChatUpdate {
  string previousName = 1;
  string newName = 2;
}

message BackupProtoThreadMergeChatUpdate {
  uint64 previousE164 = 1;
}

message BackupProtoSessionSwitchoverChatUpdate {
  uint64 e164 = 1;
}

message BackupProtoGroupChangeChatUpdate {
  message BackupProtoUpdate {
    // Note: group expiration timer changes are represented as ExpirationTimerChatUpdate.
    oneof update {
      BackupProtoGenericGroupUpdate genericGroupUpdate = 1;
      BackupProtoGroupCreationUpdate groupCreationUpdate = 2;
      BackupProtoGroupNameUpdate groupNameUpdate = 3;
      BackupProtoGroupAvatarUpdate groupAvatarUpdate = 4;
      BackupProtoGroupDescriptionUpdate groupDescriptionUpdate = 5;
      BackupProtoGroupMembershipAccessLevelChangeUpdate groupMembershipAccessLevelChangeUpdate = 6;
      BackupProtoGroupAttributesAccessLevelChangeUpdate groupAttributesAccessLevelChangeUpdate = 7;
      BackupProtoGroupAnnouncementOnlyChangeUpdate groupAnnouncementOnlyChangeUpdate = 8;
      BackupProtoGroupAdminStatusUpdate groupAdminStatusUpdate = 9;
      BackupProtoGroupMemberLeftUpdate groupMemberLeftUpdate = 10;
      BackupProtoGroupMemberRemovedUpdate groupMemberRemovedUpdate = 11;
      BackupProtoSelfInvitedToGroupUpdate selfInvitedToGroupUpdate = 12;
      BackupProtoSelfInvitedOtherUserToGroupUpdate selfInvitedOtherUserToGroupUpdate = 13;
      BackupProtoGroupUnknownInviteeUpdate groupUnknownInviteeUpdate = 14;
      BackupProtoGroupInvitationAcceptedUpdate groupInvitationAcceptedUpdate = 15;
      BackupProtoGroupInvitationDeclinedUpdate groupInvitationDeclinedUpdate = 16;
      BackupProtoGroupMemberJoinedUpdate groupMemberJoinedUpdate = 17;
      BackupProtoGroupMemberAddedUpdate groupMemberAddedUpdate = 18;
      BackupProtoGroupSelfInvitationRevokedUpdate groupSelfInvitationRevokedUpdate = 19;
      BackupProtoGroupInvitationRevokedUpdate groupInvitationRevokedUpdate = 20;
      BackupProtoGroupJoinRequestUpdate groupJoinRequestUpdate = 21;
      BackupProtoGroupJoinRequestApprovalUpdate groupJoinRequestApprovalUpdate = 22;
      BackupProtoGroupJoinRequestCanceledUpdate groupJoinRequestCanceledUpdate = 23;
      BackupProtoGroupInviteLinkResetUpdate groupInviteLinkResetUpdate = 24;
      BackupProtoGroupInviteLinkEnabledUpdate groupInviteLinkEnabledUpdate = 25;
      BackupProtoGroupInviteLinkAdminApprovalUpdate groupInviteLinkAdminApprovalUpdate = 26;
      BackupProtoGroupInviteLinkDisabledUpdate groupInviteLinkDisabledUpdate = 27;
      BackupProtoGroupMemberJoinedByLinkUpdate groupMemberJoinedByLinkUpdate = 28;
      BackupProtoGroupV2MigrationUpdate groupV2MigrationUpdate = 29;
      BackupProtoGroupV2MigrationSelfInvitedUpdate groupV2MigrationSelfInvitedUpdate = 30;
      BackupProtoGroupV2MigrationInvitedMembersUpdate groupV2MigrationInvitedMembersUpdate = 31;
      BackupProtoGroupV2MigrationDroppedMembersUpdate groupV2MigrationDroppedMembersUpdate = 32;
      BackupProtoGroupSequenceOfRequestsAndCancelsUpdate groupSequenceOfRequestsAndCancelsUpdate = 33;
      BackupProtoGroupExpirationTimerUpdate groupExpirationTimerUpdate = 34;
    }
  }

  // Must be one or more; all updates batched together came from
  // a single batched group state update.
  repeated BackupProtoUpdate updates = 1;
}

message BackupProtoGenericGroupUpdate {
  optional bytes updaterAci = 1;
}

message BackupProtoGroupCreationUpdate {
  optional bytes updaterAci = 1;
}

message BackupProtoGroupNameUpdate {
  optional bytes updaterAci = 1;
  // Null value means the group name was removed.
  optional string newGroupName = 2;
}

message BackupProtoGroupAvatarUpdate {
  optional bytes updaterAci = 1;
  bool wasRemoved = 2;
}

message BackupProtoGroupDescriptionUpdate {
  optional bytes updaterAci = 1;
  // Null value means the group description was removed.
  optional string newDescription = 2;
}

enum BackupProtoGroupV2AccessLevel {
  UNKNOWN = 0;
  ANY = 1;
  MEMBER = 2;
  ADMINISTRATOR = 3;
  UNSATISFIABLE = 4;
}

message BackupProtoGroupMembershipAccessLevelChangeUpdate {
  optional bytes updaterAci = 1;
  optional BackupProtoGroupV2AccessLevel accessLevel = 2;
}

message BackupProtoGroupAttributesAccessLevelChangeUpdate {
  optional bytes updaterAci = 1;
  optional BackupProtoGroupV2AccessLevel accessLevel = 2;
}

message BackupProtoGroupAnnouncementOnlyChangeUpdate {
  optional bytes updaterAci = 1;
  bool isAnnouncementOnly = 2;
}

message BackupProtoGroupAdminStatusUpdate {
  optional bytes updaterAci = 1;
  // The aci who had admin status granted or revoked.
  bytes memberAci = 2;
  bool wasAdminStatusGranted = 3;
}

message BackupProtoGroupMemberLeftUpdate {
  bytes aci = 1;
}

message BackupProtoGroupMemberRemovedUpdate {
  optional bytes removerAci = 1;
  bytes removedAci = 2;
}

message BackupProtoSelfInvitedToGroupUpdate {
  optional bytes inviterAci = 1;
}

message BackupProtoSelfInvitedOtherUserToGroupUpdate {
  // If no invitee id available, use GroupUnknownInviteeUpdate
  bytes inviteeServiceId = 1;
}

message BackupProtoGroupUnknownInviteeUpdate {
  // Can be the self user.
  optional bytes inviterAci = 1;
  uint32 inviteeCount = 2;
}

message BackupProtoGroupInvitationAcceptedUpdate {
  optional bytes inviterAci = 1;
  bytes newMemberAci = 2;
}

message BackupProtoGroupInvitationDeclinedUpdate {
  optional bytes inviterAci = 1;
  // Note: if invited by pni, just set inviteeAci to nil.
  optional bytes inviteeAci = 2;
}

message BackupProtoGroupMemberJoinedUpdate {
  bytes newMemberAci = 1;
}

message BackupProtoGroupMemberAddedUpdate {
  optional bytes updaterAci = 1;
  bytes newMemberAci = 2;
  bool hadOpenInvitation = 3;
  // If hadOpenInvitation is true, optionally include aci of the inviter.
  optional bytes inviterAci = 4;
}

// An invitation to self was revoked.
message BackupProtoGroupSelfInvitationRevokedUpdate {
  optional bytes revokerAci = 1;
}

// These invitees should never be the local user.
// Use GroupSelfInvitationRevokedUpdate in those cases.
// The inviter or updater can be the local user.
message BackupProtoGroupInvitationRevokedUpdate {
  message BackupProtoInvitee {
    optional bytes inviterAci = 1;
    // Prefer to use aci over pni. No need to set
    // pni if aci is set. Both can be missing.
    optional bytes inviteeAci = 2;
    optional bytes inviteePni = 3;
  }

  // The member that revoked the invite(s), not the inviter!
  // Assumed to be an admin (at the time, may no longer be an
  // admin or even a member).
  optional bytes updaterAci = 1;
  repeated BackupProtoInvitee invitees = 2;
}

message BackupProtoGroupJoinRequestUpdate {
  bytes requestorAci = 1;
}

message BackupProtoGroupJoinRequestApprovalUpdate {
  bytes requestorAci = 1;
  // The aci that approved or rejected the request.
  optional bytes updaterAci = 2;
  bool wasApproved = 3;
}

message BackupProtoGroupJoinRequestCanceledUpdate {
  bytes requestorAci = 1;
}

// A single requestor has requested to join and cancelled
// their request repeatedly with no other updates in between.
// The last action encompassed by this update is always a
// cancellation; if there was another open request immediately
// after, it will be a separate GroupJoinRequestUpdate, either
// in the same frame or in a subsequent frame.
message BackupProtoGroupSequenceOfRequestsAndCancelsUpdate {
  bytes requestorAci = 1;
  uint32 count = 2;
}

message BackupProtoGroupInviteLinkResetUpdate {
  optional bytes updaterAci = 1;
}

message BackupProtoGroupInviteLinkEnabledUpdate {
  optional bytes updaterAci = 1;
  bool linkRequiresAdminApproval = 2;
}

message BackupProtoGroupInviteLinkAdminApprovalUpdate {
  optional bytes updaterAci = 1;
  bool linkRequiresAdminApproval = 2;
}

message BackupProtoGroupInviteLinkDisabledUpdate {
  optional bytes updaterAci = 1;
}

message BackupProtoGroupMemberJoinedByLinkUpdate {
  bytes newMemberAci = 1;
}

// A gv1->gv2 migration occurred.
message BackupProtoGroupV2MigrationUpdate  {}

// Another user migrated gv1->gv2 but was unable to add
// the local user and invited them instead.
message BackupProtoGroupV2MigrationSelfInvitedUpdate {}

// The local user migrated gv1->gv2 but was unable to
// add some members and invited them instead.
// (Happens if we don't have the invitee's profile key)
message BackupProtoGroupV2MigrationInvitedMembersUpdate {
  uint32 invitedMembersCount = 1;
}

// The local user migrated gv1->gv2 but was unable to
// add or invite some members and dropped them instead.
// (Happens for e164 members where we don't have an aci).
message BackupProtoGroupV2MigrationDroppedMembersUpdate {
  uint32 droppedMembersCount = 1;
}

// For 1:1 timer updates, use ExpirationTimerChatUpdate.
message BackupProtoGroupExpirationTimerUpdate {
  uint32 expiresInMs = 1; // 0 means the expiration timer was disabled.
  optional bytes updaterAci = 2;
}

message BackupProtoStickerPack {
  bytes id = 1;
  bytes key = 2;
  string title = 3;
  string author = 4;
  repeated BackupProtoStickerPackSticker stickers = 5; // First one should be cover sticker.
}

message BackupProtoStickerPackSticker {
  BackupProtoFilePointer data = 1;
  string emoji = 2;
}
