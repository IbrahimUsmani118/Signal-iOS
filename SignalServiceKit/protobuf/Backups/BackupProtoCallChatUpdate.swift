//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoCallChatUpdate in Backup.proto
import Wire

public struct BackupProtoCallChatUpdate {

    public var call: Call?
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoCallChatUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoCallChatUpdate : Hashable {
}
#endif

extension BackupProtoCallChatUpdate : Sendable {
}

extension BackupProtoCallChatUpdate : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoCallChatUpdate {
        BackupProtoCallChatUpdate()
    }
}

extension BackupProtoCallChatUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoCallChatUpdate"
    }

}

extension BackupProtoCallChatUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var call: Call? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: call = .callId(try protoReader.decode(UInt64.self))
            case 2: call = .callMessage(try protoReader.decode(BackupProtoIndividualCallChatUpdate.self))
            case 3: call = .groupCall(try protoReader.decode(BackupProtoGroupCallChatUpdate.self))
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.call = call
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        if let call = self.call {
            try call.encode(to: protoWriter)
        }
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoCallChatUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        if let callId = try container.decodeIfPresent(UInt64.self, forKey: "callId") {
            self.call = .callId(callId)
        } else if let callMessage = try container.decodeIfPresent(BackupProtoIndividualCallChatUpdate.self, forKey: "callMessage") {
            self.call = .callMessage(callMessage)
        } else if let groupCall = try container.decodeIfPresent(BackupProtoGroupCallChatUpdate.self, forKey: "groupCall") {
            self.call = .groupCall(groupCall)
        } else {
            self.call = nil
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        switch self.call {
        case .callId(let callId): try container.encode(callId, forKey: "callId")
        case .callMessage(let callMessage): try container.encode(callMessage, forKey: "callMessage")
        case .groupCall(let groupCall): try container.encode(groupCall, forKey: "groupCall")
        case Optional.none: break
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoCallChatUpdate
 */
extension BackupProtoCallChatUpdate {

    public enum Call {

        /**
         * maps to id of call from call log
         */
        case callId(UInt64)
        case callMessage(BackupProtoIndividualCallChatUpdate)
        case groupCall(BackupProtoGroupCallChatUpdate)

        fileprivate func encode(to protoWriter: ProtoWriter) throws {
            switch self {
            case .callId(let callId): try protoWriter.encode(tag: 1, value: callId)
            case .callMessage(let callMessage): try protoWriter.encode(tag: 2, value: callMessage)
            case .groupCall(let groupCall): try protoWriter.encode(tag: 3, value: groupCall)
            }
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoCallChatUpdate.Call : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoCallChatUpdate.Call : Hashable {
}
#endif

extension BackupProtoCallChatUpdate.Call : Sendable {
}
