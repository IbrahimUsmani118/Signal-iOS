//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoText in Backup.proto
import Wire

public struct BackupProtoText {

    public var body: String
    public var bodyRanges: [BackupProtoBodyRange] = []
    public var unknownFields: UnknownFields = .init()

    public init(body: String, configure: (inout Self) -> Swift.Void = { _ in }) {
        self.body = body
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoText : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoText : Hashable {
}
#endif

extension BackupProtoText : Sendable {
}

extension BackupProtoText : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoText"
    }

}

extension BackupProtoText : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var body: String = ""
        var bodyRanges: [BackupProtoBodyRange] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: body = try protoReader.decode(String.self)
            case 2: try protoReader.decode(into: &bodyRanges)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.body = body
        self.bodyRanges = bodyRanges
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.body)
        try protoWriter.encode(tag: 2, value: self.bodyRanges)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoText : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.body = try container.decode(String.self, forKey: "body")
        self.bodyRanges = try container.decodeProtoArray(BackupProtoBodyRange.self, forKey: "bodyRanges")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.body.isEmpty {
            try container.encode(self.body, forKey: "body")
        }
        if includeDefaults || !self.bodyRanges.isEmpty {
            try container.encodeProtoArray(self.bodyRanges, forKey: "bodyRanges")
        }
    }

}
#endif
