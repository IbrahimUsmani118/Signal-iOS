//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoGroupV2MigrationInvitedMembersUpdate in Backup.proto
import Wire

/**
 * The local user migrated gv1->gv2 but was unable to
 * add some members and invited them instead.
 * (Happens if we don't have the invitee's profile key)
 */
public struct BackupProtoGroupV2MigrationInvitedMembersUpdate {

    public var invitedMembersCount: UInt32
    public var unknownFields: UnknownFields = .init()

    public init(invitedMembersCount: UInt32) {
        self.invitedMembersCount = invitedMembersCount
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupV2MigrationInvitedMembersUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupV2MigrationInvitedMembersUpdate : Hashable {
}
#endif

extension BackupProtoGroupV2MigrationInvitedMembersUpdate : Sendable {
}

extension BackupProtoGroupV2MigrationInvitedMembersUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroupV2MigrationInvitedMembersUpdate"
    }

}

extension BackupProtoGroupV2MigrationInvitedMembersUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var invitedMembersCount: UInt32 = 0

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: invitedMembersCount = try protoReader.decode(UInt32.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.invitedMembersCount = invitedMembersCount
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.invitedMembersCount)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroupV2MigrationInvitedMembersUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.invitedMembersCount = try container.decode(UInt32.self, forKey: "invitedMembersCount")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || self.invitedMembersCount != 0 {
            try container.encode(self.invitedMembersCount, forKey: "invitedMembersCount")
        }
    }

}
#endif
