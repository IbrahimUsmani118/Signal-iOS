//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoBodyRange in Backup.proto
import Foundation
import Wire

public struct BackupProtoBodyRange {

    @ProtoDefaulted
    public var start: UInt32?
    @ProtoDefaulted
    public var length: UInt32?
    public var associatedValue: AssociatedValue?
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoBodyRange : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoBodyRange : Hashable {
}
#endif

extension BackupProtoBodyRange : Sendable {
}

extension BackupProtoBodyRange : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoBodyRange {
        BackupProtoBodyRange()
    }
}

extension BackupProtoBodyRange : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoBodyRange"
    }

}

extension BackupProtoBodyRange : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var start: UInt32? = nil
        var length: UInt32? = nil
        var associatedValue: AssociatedValue? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: start = try protoReader.decode(UInt32.self)
            case 2: length = try protoReader.decode(UInt32.self)
            case 3: associatedValue = .mentionAci(try protoReader.decode(Foundation.Data.self))
            case 4: associatedValue = (try protoReader.decode(BackupProtoBodyRange.BackupProtoStyle.self)).flatMap { .style($0) }
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._start.wrappedValue = start
        self._length.wrappedValue = length
        self.associatedValue = associatedValue
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.start)
        try protoWriter.encode(tag: 2, value: self.length)
        if let associatedValue = self.associatedValue {
            try associatedValue.encode(to: protoWriter)
        }
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoBodyRange : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._start.wrappedValue = try container.decodeIfPresent(UInt32.self, forKey: "start")
        self._length.wrappedValue = try container.decodeIfPresent(UInt32.self, forKey: "length")
        if let mentionAci = try container.decodeIfPresent(Foundation.Data.self, forKey: "mentionAci") {
            self.associatedValue = .mentionAci(mentionAci)
        } else if let style = try container.decodeIfPresent(BackupProtoBodyRange.BackupProtoStyle.self, forKey: "style") {
            self.associatedValue = .style(style)
        } else {
            self.associatedValue = nil
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.start, forKey: "start")
        try container.encodeIfPresent(self.length, forKey: "length")
        switch self.associatedValue {
        case .mentionAci(let mentionAci): try container.encode(mentionAci, forKey: "mentionAci")
        case .style(let style): try container.encode(style, forKey: "style")
        case Optional.none: break
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoBodyRange
 */
extension BackupProtoBodyRange {

    public enum AssociatedValue {

        case mentionAci(Foundation.Data)
        case style(BackupProtoBodyRange.BackupProtoStyle)

        fileprivate func encode(to protoWriter: ProtoWriter) throws {
            switch self {
            case .mentionAci(let mentionAci): try protoWriter.encode(tag: 3, value: mentionAci)
            case .style(let style): try protoWriter.encode(tag: 4, value: style)
            }
        }

    }

    public enum BackupProtoStyle : Int32, CaseIterable, ProtoEnum, ProtoDefaultedValue {

        case NONE = 0
        case BOLD = 1
        case ITALIC = 2
        case SPOILER = 3
        case STRIKETHROUGH = 4
        case MONOSPACE = 5

        public static var defaultedValue: BackupProtoBodyRange.BackupProtoStyle {
            BackupProtoBodyRange.BackupProtoStyle.NONE
        }
        public var description: String {
            switch self {
            case .NONE: return "NONE"
            case .BOLD: return "BOLD"
            case .ITALIC: return "ITALIC"
            case .SPOILER: return "SPOILER"
            case .STRIKETHROUGH: return "STRIKETHROUGH"
            case .MONOSPACE: return "MONOSPACE"
            }
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoBodyRange.AssociatedValue : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoBodyRange.AssociatedValue : Hashable {
}
#endif

extension BackupProtoBodyRange.AssociatedValue : Sendable {
}

extension BackupProtoBodyRange.BackupProtoStyle : Sendable {
}
