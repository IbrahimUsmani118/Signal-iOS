//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoVoiceMessage in Backup.proto
import Wire

public struct BackupProtoVoiceMessage {

    public var quote: BackupProtoQuote?
    @ProtoDefaulted
    public var audio: BackupProtoFilePointer?
    public var reactions: [BackupProtoReaction] = []
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoVoiceMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoVoiceMessage : Hashable {
}
#endif

extension BackupProtoVoiceMessage : Sendable {
}

extension BackupProtoVoiceMessage : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoVoiceMessage {
        BackupProtoVoiceMessage()
    }
}

extension BackupProtoVoiceMessage : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoVoiceMessage"
    }

}

extension BackupProtoVoiceMessage : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var quote: BackupProtoQuote? = nil
        var audio: BackupProtoFilePointer? = nil
        var reactions: [BackupProtoReaction] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: quote = try protoReader.decode(BackupProtoQuote.self)
            case 2: audio = try protoReader.decode(BackupProtoFilePointer.self)
            case 3: try protoReader.decode(into: &reactions)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.quote = quote
        self._audio.wrappedValue = audio
        self.reactions = reactions
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.quote)
        try protoWriter.encode(tag: 2, value: self.audio)
        try protoWriter.encode(tag: 3, value: self.reactions)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoVoiceMessage : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.quote = try container.decodeIfPresent(BackupProtoQuote.self, forKey: "quote")
        self._audio.wrappedValue = try container.decodeIfPresent(BackupProtoFilePointer.self, forKey: "audio")
        self.reactions = try container.decodeProtoArray(BackupProtoReaction.self, forKey: "reactions")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        try container.encodeIfPresent(self.quote, forKey: "quote")
        try container.encodeIfPresent(self.audio, forKey: "audio")
        if includeDefaults || !self.reactions.isEmpty {
            try container.encodeProtoArray(self.reactions, forKey: "reactions")
        }
    }

}
#endif
