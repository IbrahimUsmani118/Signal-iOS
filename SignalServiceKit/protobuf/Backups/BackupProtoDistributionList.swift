//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoDistributionList in Backup.proto
import Foundation
import Wire

public struct BackupProtoDistributionList {

    public var name: String
    /**
     * distribution list ids are uuids
     */
    public var distributionId: Foundation.Data
    public var allowReplies: Bool
    public var deletionTimestamp: UInt64
    @ProtoDefaulted
    public var privacyMode: BackupProtoDistributionList.BackupProtoPrivacyMode?
    /**
     * generated recipient id
     */
    public var memberRecipientIds: [UInt64] = []
    public var unknownFields: UnknownFields = .init()

    public init(
        name: String,
        distributionId: Foundation.Data,
        allowReplies: Bool,
        deletionTimestamp: UInt64,
        configure: (inout Self) -> Swift.Void = { _ in }
    ) {
        self.name = name
        self.distributionId = distributionId
        self.allowReplies = allowReplies
        self.deletionTimestamp = deletionTimestamp
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoDistributionList : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoDistributionList : Hashable {
}
#endif

extension BackupProtoDistributionList : Sendable {
}

extension BackupProtoDistributionList : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoDistributionList"
    }

}

extension BackupProtoDistributionList : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var name: String = ""
        var distributionId: Foundation.Data = .init()
        var allowReplies: Bool = false
        var deletionTimestamp: UInt64 = 0
        var privacyMode: BackupProtoDistributionList.BackupProtoPrivacyMode? = nil
        var memberRecipientIds: [UInt64] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: name = try protoReader.decode(String.self)
            case 2: distributionId = try protoReader.decode(Foundation.Data.self)
            case 3: allowReplies = try protoReader.decode(Bool.self)
            case 4: deletionTimestamp = try protoReader.decode(UInt64.self)
            case 5: privacyMode = try protoReader.decode(BackupProtoDistributionList.BackupProtoPrivacyMode.self)
            case 6: try protoReader.decode(into: &memberRecipientIds)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.name = name
        self.distributionId = distributionId
        self.allowReplies = allowReplies
        self.deletionTimestamp = deletionTimestamp
        self._privacyMode.wrappedValue = try BackupProtoDistributionList.BackupProtoPrivacyMode.defaultIfMissing(privacyMode)
        self.memberRecipientIds = memberRecipientIds
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.name)
        try protoWriter.encode(tag: 2, value: self.distributionId)
        try protoWriter.encode(tag: 3, value: self.allowReplies)
        try protoWriter.encode(tag: 4, value: self.deletionTimestamp)
        try protoWriter.encode(tag: 5, value: self.privacyMode)
        try protoWriter.encode(tag: 6, value: self.memberRecipientIds, packed: true)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoDistributionList : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.name = try container.decode(String.self, forKey: "name")
        self.distributionId = try container.decode(stringEncoded: Foundation.Data.self, forKey: "distributionId")
        self.allowReplies = try container.decode(Bool.self, forKey: "allowReplies")
        self.deletionTimestamp = try container.decode(stringEncoded: UInt64.self, forKey: "deletionTimestamp")
        self._privacyMode.wrappedValue = try container.decodeIfPresent(BackupProtoDistributionList.BackupProtoPrivacyMode.self, forKey: "privacyMode")
        self.memberRecipientIds = try container.decodeProtoArray(UInt64.self, forKey: "memberRecipientIds")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.name.isEmpty {
            try container.encode(self.name, forKey: "name")
        }
        if includeDefaults || !self.distributionId.isEmpty {
            try container.encode(stringEncoded: self.distributionId, forKey: "distributionId")
        }
        if includeDefaults || self.allowReplies != false {
            try container.encode(self.allowReplies, forKey: "allowReplies")
        }
        if includeDefaults || self.deletionTimestamp != 0 {
            try container.encode(stringEncoded: self.deletionTimestamp, forKey: "deletionTimestamp")
        }
        try container.encodeIfPresent(self.privacyMode, forKey: "privacyMode")
        if includeDefaults || !self.memberRecipientIds.isEmpty {
            try container.encodeProtoArray(self.memberRecipientIds, forKey: "memberRecipientIds")
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoDistributionList
 */
extension BackupProtoDistributionList {

    public enum BackupProtoPrivacyMode : Int32, CaseIterable, ProtoEnum, ProtoDefaultedValue {

        case UNKNOWN = 0
        case ONLY_WITH = 1
        case ALL_EXCEPT = 2
        case ALL = 3

        public static var defaultedValue: BackupProtoDistributionList.BackupProtoPrivacyMode {
            BackupProtoDistributionList.BackupProtoPrivacyMode.UNKNOWN
        }
        public var description: String {
            switch self {
            case .UNKNOWN: return "UNKNOWN"
            case .ONLY_WITH: return "ONLY_WITH"
            case .ALL_EXCEPT: return "ALL_EXCEPT"
            case .ALL: return "ALL"
            }
        }

    }

}

extension BackupProtoDistributionList.BackupProtoPrivacyMode : Sendable {
}
