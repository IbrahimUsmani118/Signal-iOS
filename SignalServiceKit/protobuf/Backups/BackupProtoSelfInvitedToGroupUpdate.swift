//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoSelfInvitedToGroupUpdate in Backup.proto
import Foundation
import Wire

public struct BackupProtoSelfInvitedToGroupUpdate {

    @ProtoDefaulted
    public var inviterAci: Foundation.Data?
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoSelfInvitedToGroupUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoSelfInvitedToGroupUpdate : Hashable {
}
#endif

extension BackupProtoSelfInvitedToGroupUpdate : Sendable {
}

extension BackupProtoSelfInvitedToGroupUpdate : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoSelfInvitedToGroupUpdate {
        BackupProtoSelfInvitedToGroupUpdate()
    }
}

extension BackupProtoSelfInvitedToGroupUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoSelfInvitedToGroupUpdate"
    }

}

extension BackupProtoSelfInvitedToGroupUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var inviterAci: Foundation.Data? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: inviterAci = try protoReader.decode(Foundation.Data.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._inviterAci.wrappedValue = inviterAci
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.inviterAci)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoSelfInvitedToGroupUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._inviterAci.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "inviterAci")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(stringEncoded: self.inviterAci, forKey: "inviterAci")
    }

}
#endif
