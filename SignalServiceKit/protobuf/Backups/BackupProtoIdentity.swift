//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoIdentity in Backup.proto
import Foundation
import Wire

public struct BackupProtoIdentity {

    public var serviceId: Foundation.Data
    public var identityKey: Foundation.Data
    public var timestamp: UInt64
    public var firstUse: Bool
    public var verified: Bool
    public var nonblockingApproval: Bool
    public var unknownFields: UnknownFields = .init()

    public init(
        serviceId: Foundation.Data,
        identityKey: Foundation.Data,
        timestamp: UInt64,
        firstUse: Bool,
        verified: Bool,
        nonblockingApproval: Bool
    ) {
        self.serviceId = serviceId
        self.identityKey = identityKey
        self.timestamp = timestamp
        self.firstUse = firstUse
        self.verified = verified
        self.nonblockingApproval = nonblockingApproval
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoIdentity : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoIdentity : Hashable {
}
#endif

extension BackupProtoIdentity : Sendable {
}

extension BackupProtoIdentity : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoIdentity"
    }

}

extension BackupProtoIdentity : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var serviceId: Foundation.Data = .init()
        var identityKey: Foundation.Data = .init()
        var timestamp: UInt64 = 0
        var firstUse: Bool = false
        var verified: Bool = false
        var nonblockingApproval: Bool = false

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: serviceId = try protoReader.decode(Foundation.Data.self)
            case 2: identityKey = try protoReader.decode(Foundation.Data.self)
            case 3: timestamp = try protoReader.decode(UInt64.self)
            case 4: firstUse = try protoReader.decode(Bool.self)
            case 5: verified = try protoReader.decode(Bool.self)
            case 6: nonblockingApproval = try protoReader.decode(Bool.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.serviceId = serviceId
        self.identityKey = identityKey
        self.timestamp = timestamp
        self.firstUse = firstUse
        self.verified = verified
        self.nonblockingApproval = nonblockingApproval
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.serviceId)
        try protoWriter.encode(tag: 2, value: self.identityKey)
        try protoWriter.encode(tag: 3, value: self.timestamp)
        try protoWriter.encode(tag: 4, value: self.firstUse)
        try protoWriter.encode(tag: 5, value: self.verified)
        try protoWriter.encode(tag: 6, value: self.nonblockingApproval)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoIdentity : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.serviceId = try container.decode(stringEncoded: Foundation.Data.self, forKey: "serviceId")
        self.identityKey = try container.decode(stringEncoded: Foundation.Data.self, forKey: "identityKey")
        self.timestamp = try container.decode(stringEncoded: UInt64.self, forKey: "timestamp")
        self.firstUse = try container.decode(Bool.self, forKey: "firstUse")
        self.verified = try container.decode(Bool.self, forKey: "verified")
        self.nonblockingApproval = try container.decode(Bool.self, forKey: "nonblockingApproval")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.serviceId.isEmpty {
            try container.encode(stringEncoded: self.serviceId, forKey: "serviceId")
        }
        if includeDefaults || !self.identityKey.isEmpty {
            try container.encode(stringEncoded: self.identityKey, forKey: "identityKey")
        }
        if includeDefaults || self.timestamp != 0 {
            try container.encode(stringEncoded: self.timestamp, forKey: "timestamp")
        }
        if includeDefaults || self.firstUse != false {
            try container.encode(self.firstUse, forKey: "firstUse")
        }
        if includeDefaults || self.verified != false {
            try container.encode(self.verified, forKey: "verified")
        }
        if includeDefaults || self.nonblockingApproval != false {
            try container.encode(self.nonblockingApproval, forKey: "nonblockingApproval")
        }
    }

}
#endif
