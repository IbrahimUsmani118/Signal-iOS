//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoFrame in Backup.proto
import Wire

public struct BackupProtoFrame {

    public var item: Item?
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoFrame : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoFrame : Hashable {
}
#endif

extension BackupProtoFrame : Sendable {
}

extension BackupProtoFrame : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoFrame {
        BackupProtoFrame()
    }
}

extension BackupProtoFrame : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoFrame"
    }

}

extension BackupProtoFrame : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var item: Item? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: item = .account(try protoReader.decode(BackupProtoAccountData.self))
            case 2: item = .recipient(try protoReader.decode(BackupProtoRecipient.self))
            case 3: item = .chat(try protoReader.decode(BackupProtoChat.self))
            case 4: item = .chatItem(try protoReader.decode(BackupProtoChatItem.self))
            case 5: item = .call(try protoReader.decode(BackupProtoCall.self))
            case 6: item = .stickerPack(try protoReader.decode(BackupProtoStickerPack.self))
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.item = item
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        if let item = self.item {
            try item.encode(to: protoWriter)
        }
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoFrame : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        if let account = try container.decodeIfPresent(BackupProtoAccountData.self, forKey: "account") {
            self.item = .account(account)
        } else if let recipient = try container.decodeIfPresent(BackupProtoRecipient.self, forKey: "recipient") {
            self.item = .recipient(recipient)
        } else if let chat = try container.decodeIfPresent(BackupProtoChat.self, forKey: "chat") {
            self.item = .chat(chat)
        } else if let chatItem = try container.decodeIfPresent(BackupProtoChatItem.self, forKey: "chatItem") {
            self.item = .chatItem(chatItem)
        } else if let call = try container.decodeIfPresent(BackupProtoCall.self, forKey: "call") {
            self.item = .call(call)
        } else if let stickerPack = try container.decodeIfPresent(BackupProtoStickerPack.self, forKey: "stickerPack") {
            self.item = .stickerPack(stickerPack)
        } else {
            self.item = nil
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        switch self.item {
        case .account(let account): try container.encode(account, forKey: "account")
        case .recipient(let recipient): try container.encode(recipient, forKey: "recipient")
        case .chat(let chat): try container.encode(chat, forKey: "chat")
        case .chatItem(let chatItem): try container.encode(chatItem, forKey: "chatItem")
        case .call(let call): try container.encode(call, forKey: "call")
        case .stickerPack(let stickerPack): try container.encode(stickerPack, forKey: "stickerPack")
        case Optional.none: break
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoFrame
 */
extension BackupProtoFrame {

    public enum Item {

        case account(BackupProtoAccountData)
        case recipient(BackupProtoRecipient)
        case chat(BackupProtoChat)
        case chatItem(BackupProtoChatItem)
        case call(BackupProtoCall)
        case stickerPack(BackupProtoStickerPack)

        fileprivate func encode(to protoWriter: ProtoWriter) throws {
            switch self {
            case .account(let account): try protoWriter.encode(tag: 1, value: account)
            case .recipient(let recipient): try protoWriter.encode(tag: 2, value: recipient)
            case .chat(let chat): try protoWriter.encode(tag: 3, value: chat)
            case .chatItem(let chatItem): try protoWriter.encode(tag: 4, value: chatItem)
            case .call(let call): try protoWriter.encode(tag: 5, value: call)
            case .stickerPack(let stickerPack): try protoWriter.encode(tag: 6, value: stickerPack)
            }
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoFrame.Item : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoFrame.Item : Hashable {
}
#endif

extension BackupProtoFrame.Item : Sendable {
}
