//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoReaction in Backup.proto
import Wire

public struct BackupProtoReaction {

    public var emoji: String
    public var authorId: UInt64
    public var sentTimestamp: UInt64
    @ProtoDefaulted
    public var receivedTimestamp: UInt64?
    /**
     * A higher sort order means that a reaction is more recent
     */
    public var sortOrder: UInt64
    public var unknownFields: UnknownFields = .init()

    public init(
        emoji: String,
        authorId: UInt64,
        sentTimestamp: UInt64,
        sortOrder: UInt64,
        configure: (inout Self) -> Swift.Void = { _ in }
    ) {
        self.emoji = emoji
        self.authorId = authorId
        self.sentTimestamp = sentTimestamp
        self.sortOrder = sortOrder
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoReaction : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoReaction : Hashable {
}
#endif

extension BackupProtoReaction : Sendable {
}

extension BackupProtoReaction : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoReaction"
    }

}

extension BackupProtoReaction : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var emoji: String = ""
        var authorId: UInt64 = 0
        var sentTimestamp: UInt64 = 0
        var receivedTimestamp: UInt64? = nil
        var sortOrder: UInt64 = 0

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: emoji = try protoReader.decode(String.self)
            case 2: authorId = try protoReader.decode(UInt64.self)
            case 3: sentTimestamp = try protoReader.decode(UInt64.self)
            case 4: receivedTimestamp = try protoReader.decode(UInt64.self)
            case 5: sortOrder = try protoReader.decode(UInt64.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.emoji = emoji
        self.authorId = authorId
        self.sentTimestamp = sentTimestamp
        self._receivedTimestamp.wrappedValue = receivedTimestamp
        self.sortOrder = sortOrder
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.emoji)
        try protoWriter.encode(tag: 2, value: self.authorId)
        try protoWriter.encode(tag: 3, value: self.sentTimestamp)
        try protoWriter.encode(tag: 4, value: self.receivedTimestamp)
        try protoWriter.encode(tag: 5, value: self.sortOrder)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoReaction : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.emoji = try container.decode(String.self, forKey: "emoji")
        self.authorId = try container.decode(stringEncoded: UInt64.self, forKey: "authorId")
        self.sentTimestamp = try container.decode(stringEncoded: UInt64.self, forKey: "sentTimestamp")
        self._receivedTimestamp.wrappedValue = try container.decodeIfPresent(stringEncoded: UInt64.self, forKey: "receivedTimestamp")
        self.sortOrder = try container.decode(stringEncoded: UInt64.self, forKey: "sortOrder")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.emoji.isEmpty {
            try container.encode(self.emoji, forKey: "emoji")
        }
        if includeDefaults || self.authorId != 0 {
            try container.encode(stringEncoded: self.authorId, forKey: "authorId")
        }
        if includeDefaults || self.sentTimestamp != 0 {
            try container.encode(stringEncoded: self.sentTimestamp, forKey: "sentTimestamp")
        }
        try container.encodeIfPresent(stringEncoded: self.receivedTimestamp, forKey: "receivedTimestamp")
        if includeDefaults || self.sortOrder != 0 {
            try container.encode(stringEncoded: self.sortOrder, forKey: "sortOrder")
        }
    }

}
#endif
