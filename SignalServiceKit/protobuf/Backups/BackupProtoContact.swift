//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoContact in Backup.proto
import Foundation
import Wire

public struct BackupProtoContact {

    /**
     * should be 16 bytes
     */
    @ProtoDefaulted
    public var aci: Foundation.Data?
    /**
     * should be 16 bytes
     */
    @ProtoDefaulted
    public var pni: Foundation.Data?
    @ProtoDefaulted
    public var username: String?
    @ProtoDefaulted
    public var e164: UInt64?
    public var blocked: Bool
    public var hidden: Bool
    @ProtoDefaulted
    public var registered: BackupProtoContact.BackupProtoRegistered?
    public var unregisteredTimestamp: UInt64
    @ProtoDefaulted
    public var profileKey: Foundation.Data?
    public var profileSharing: Bool
    @ProtoDefaulted
    public var profileGivenName: String?
    @ProtoDefaulted
    public var profileFamilyName: String?
    public var hideStory: Bool
    public var unknownFields: UnknownFields = .init()

    public init(
        blocked: Bool,
        hidden: Bool,
        unregisteredTimestamp: UInt64,
        profileSharing: Bool,
        hideStory: Bool,
        configure: (inout Self) -> Swift.Void = { _ in }
    ) {
        self.blocked = blocked
        self.hidden = hidden
        self.unregisteredTimestamp = unregisteredTimestamp
        self.profileSharing = profileSharing
        self.hideStory = hideStory
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoContact : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoContact : Hashable {
}
#endif

extension BackupProtoContact : Sendable {
}

extension BackupProtoContact : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoContact"
    }

}

extension BackupProtoContact : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var aci: Foundation.Data? = nil
        var pni: Foundation.Data? = nil
        var username: String? = nil
        var e164: UInt64? = nil
        var blocked: Bool = false
        var hidden: Bool = false
        var registered: BackupProtoContact.BackupProtoRegistered? = nil
        var unregisteredTimestamp: UInt64 = 0
        var profileKey: Foundation.Data? = nil
        var profileSharing: Bool = false
        var profileGivenName: String? = nil
        var profileFamilyName: String? = nil
        var hideStory: Bool = false

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: aci = try protoReader.decode(Foundation.Data.self)
            case 2: pni = try protoReader.decode(Foundation.Data.self)
            case 3: username = try protoReader.decode(String.self)
            case 4: e164 = try protoReader.decode(UInt64.self)
            case 5: blocked = try protoReader.decode(Bool.self)
            case 6: hidden = try protoReader.decode(Bool.self)
            case 7: registered = try protoReader.decode(BackupProtoContact.BackupProtoRegistered.self)
            case 8: unregisteredTimestamp = try protoReader.decode(UInt64.self)
            case 9: profileKey = try protoReader.decode(Foundation.Data.self)
            case 10: profileSharing = try protoReader.decode(Bool.self)
            case 11: profileGivenName = try protoReader.decode(String.self)
            case 12: profileFamilyName = try protoReader.decode(String.self)
            case 13: hideStory = try protoReader.decode(Bool.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._aci.wrappedValue = aci
        self._pni.wrappedValue = pni
        self._username.wrappedValue = username
        self._e164.wrappedValue = e164
        self.blocked = blocked
        self.hidden = hidden
        self._registered.wrappedValue = try BackupProtoContact.BackupProtoRegistered.defaultIfMissing(registered)
        self.unregisteredTimestamp = unregisteredTimestamp
        self._profileKey.wrappedValue = profileKey
        self.profileSharing = profileSharing
        self._profileGivenName.wrappedValue = profileGivenName
        self._profileFamilyName.wrappedValue = profileFamilyName
        self.hideStory = hideStory
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.aci)
        try protoWriter.encode(tag: 2, value: self.pni)
        try protoWriter.encode(tag: 3, value: self.username)
        try protoWriter.encode(tag: 4, value: self.e164)
        try protoWriter.encode(tag: 5, value: self.blocked)
        try protoWriter.encode(tag: 6, value: self.hidden)
        try protoWriter.encode(tag: 7, value: self.registered)
        try protoWriter.encode(tag: 8, value: self.unregisteredTimestamp)
        try protoWriter.encode(tag: 9, value: self.profileKey)
        try protoWriter.encode(tag: 10, value: self.profileSharing)
        try protoWriter.encode(tag: 11, value: self.profileGivenName)
        try protoWriter.encode(tag: 12, value: self.profileFamilyName)
        try protoWriter.encode(tag: 13, value: self.hideStory)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoContact : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._aci.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "aci")
        self._pni.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "pni")
        self._username.wrappedValue = try container.decodeIfPresent(String.self, forKey: "username")
        self._e164.wrappedValue = try container.decodeIfPresent(stringEncoded: UInt64.self, forKey: "e164")
        self.blocked = try container.decode(Bool.self, forKey: "blocked")
        self.hidden = try container.decode(Bool.self, forKey: "hidden")
        self._registered.wrappedValue = try container.decodeIfPresent(BackupProtoContact.BackupProtoRegistered.self, forKey: "registered")
        self.unregisteredTimestamp = try container.decode(stringEncoded: UInt64.self, forKey: "unregisteredTimestamp")
        self._profileKey.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "profileKey")
        self.profileSharing = try container.decode(Bool.self, forKey: "profileSharing")
        self._profileGivenName.wrappedValue = try container.decodeIfPresent(String.self, forKey: "profileGivenName")
        self._profileFamilyName.wrappedValue = try container.decodeIfPresent(String.self, forKey: "profileFamilyName")
        self.hideStory = try container.decode(Bool.self, forKey: "hideStory")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        try container.encodeIfPresent(stringEncoded: self.aci, forKey: "aci")
        try container.encodeIfPresent(stringEncoded: self.pni, forKey: "pni")
        try container.encodeIfPresent(self.username, forKey: "username")
        try container.encodeIfPresent(stringEncoded: self.e164, forKey: "e164")
        if includeDefaults || self.blocked != false {
            try container.encode(self.blocked, forKey: "blocked")
        }
        if includeDefaults || self.hidden != false {
            try container.encode(self.hidden, forKey: "hidden")
        }
        try container.encodeIfPresent(self.registered, forKey: "registered")
        if includeDefaults || self.unregisteredTimestamp != 0 {
            try container.encode(stringEncoded: self.unregisteredTimestamp, forKey: "unregisteredTimestamp")
        }
        try container.encodeIfPresent(stringEncoded: self.profileKey, forKey: "profileKey")
        if includeDefaults || self.profileSharing != false {
            try container.encode(self.profileSharing, forKey: "profileSharing")
        }
        try container.encodeIfPresent(self.profileGivenName, forKey: "profileGivenName")
        try container.encodeIfPresent(self.profileFamilyName, forKey: "profileFamilyName")
        if includeDefaults || self.hideStory != false {
            try container.encode(self.hideStory, forKey: "hideStory")
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoContact
 */
extension BackupProtoContact {

    public enum BackupProtoRegistered : Int32, CaseIterable, ProtoEnum, ProtoDefaultedValue {

        case UNKNOWN = 0
        case REGISTERED = 1
        case NOT_REGISTERED = 2

        public static var defaultedValue: BackupProtoContact.BackupProtoRegistered {
            BackupProtoContact.BackupProtoRegistered.UNKNOWN
        }
        public var description: String {
            switch self {
            case .UNKNOWN: return "UNKNOWN"
            case .REGISTERED: return "REGISTERED"
            case .NOT_REGISTERED: return "NOT_REGISTERED"
            }
        }

    }

}

extension BackupProtoContact.BackupProtoRegistered : Sendable {
}
