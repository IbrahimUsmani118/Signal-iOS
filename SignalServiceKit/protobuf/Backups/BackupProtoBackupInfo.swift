//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoBackupInfo in Backup.proto
import Wire

public struct BackupProtoBackupInfo {

    public var version: UInt64
    public var backupTimeMs: UInt64
    public var unknownFields: UnknownFields = .init()

    public init(version: UInt64, backupTimeMs: UInt64) {
        self.version = version
        self.backupTimeMs = backupTimeMs
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoBackupInfo : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoBackupInfo : Hashable {
}
#endif

extension BackupProtoBackupInfo : Sendable {
}

extension BackupProtoBackupInfo : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoBackupInfo"
    }

}

extension BackupProtoBackupInfo : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var version: UInt64 = 0
        var backupTimeMs: UInt64 = 0

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: version = try protoReader.decode(UInt64.self)
            case 2: backupTimeMs = try protoReader.decode(UInt64.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.version = version
        self.backupTimeMs = backupTimeMs
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.version)
        try protoWriter.encode(tag: 2, value: self.backupTimeMs)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoBackupInfo : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.version = try container.decode(stringEncoded: UInt64.self, forKey: "version")
        self.backupTimeMs = try container.decode(stringEncoded: UInt64.self, forKey: "backupTimeMs")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || self.version != 0 {
            try container.encode(stringEncoded: self.version, forKey: "version")
        }
        if includeDefaults || self.backupTimeMs != 0 {
            try container.encode(stringEncoded: self.backupTimeMs, forKey: "backupTimeMs")
        }
    }

}
#endif
