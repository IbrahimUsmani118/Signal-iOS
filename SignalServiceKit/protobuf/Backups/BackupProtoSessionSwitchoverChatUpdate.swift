//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoSessionSwitchoverChatUpdate in Backup.proto
import Wire

public struct BackupProtoSessionSwitchoverChatUpdate {

    public var e164: UInt64
    public var unknownFields: UnknownFields = .init()

    public init(e164: UInt64) {
        self.e164 = e164
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoSessionSwitchoverChatUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoSessionSwitchoverChatUpdate : Hashable {
}
#endif

extension BackupProtoSessionSwitchoverChatUpdate : Sendable {
}

extension BackupProtoSessionSwitchoverChatUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoSessionSwitchoverChatUpdate"
    }

}

extension BackupProtoSessionSwitchoverChatUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var e164: UInt64 = 0

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: e164 = try protoReader.decode(UInt64.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.e164 = e164
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.e164)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoSessionSwitchoverChatUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.e164 = try container.decode(stringEncoded: UInt64.self, forKey: "e164")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || self.e164 != 0 {
            try container.encode(stringEncoded: self.e164, forKey: "e164")
        }
    }

}
#endif
