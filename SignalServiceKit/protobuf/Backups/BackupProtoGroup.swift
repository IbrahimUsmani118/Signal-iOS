//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoGroup in Backup.proto
import Foundation
import Wire

public struct BackupProtoGroup {

    public var masterKey: Foundation.Data
    public var whitelisted: Bool
    public var hideStory: Bool
    @ProtoDefaulted
    public var storySendMode: BackupProtoGroup.BackupProtoStorySendMode?
    public var unknownFields: UnknownFields = .init()

    public init(
        masterKey: Foundation.Data,
        whitelisted: Bool,
        hideStory: Bool,
        configure: (inout Self) -> Swift.Void = { _ in }
    ) {
        self.masterKey = masterKey
        self.whitelisted = whitelisted
        self.hideStory = hideStory
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroup : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroup : Hashable {
}
#endif

extension BackupProtoGroup : Sendable {
}

extension BackupProtoGroup : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroup"
    }

}

extension BackupProtoGroup : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var masterKey: Foundation.Data = .init()
        var whitelisted: Bool = false
        var hideStory: Bool = false
        var storySendMode: BackupProtoGroup.BackupProtoStorySendMode? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: masterKey = try protoReader.decode(Foundation.Data.self)
            case 2: whitelisted = try protoReader.decode(Bool.self)
            case 3: hideStory = try protoReader.decode(Bool.self)
            case 4: storySendMode = try protoReader.decode(BackupProtoGroup.BackupProtoStorySendMode.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.masterKey = masterKey
        self.whitelisted = whitelisted
        self.hideStory = hideStory
        self._storySendMode.wrappedValue = try BackupProtoGroup.BackupProtoStorySendMode.defaultIfMissing(storySendMode)
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.masterKey)
        try protoWriter.encode(tag: 2, value: self.whitelisted)
        try protoWriter.encode(tag: 3, value: self.hideStory)
        try protoWriter.encode(tag: 4, value: self.storySendMode)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroup : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.masterKey = try container.decode(stringEncoded: Foundation.Data.self, forKey: "masterKey")
        self.whitelisted = try container.decode(Bool.self, forKey: "whitelisted")
        self.hideStory = try container.decode(Bool.self, forKey: "hideStory")
        self._storySendMode.wrappedValue = try container.decodeIfPresent(BackupProtoGroup.BackupProtoStorySendMode.self, forKey: "storySendMode")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.masterKey.isEmpty {
            try container.encode(stringEncoded: self.masterKey, forKey: "masterKey")
        }
        if includeDefaults || self.whitelisted != false {
            try container.encode(self.whitelisted, forKey: "whitelisted")
        }
        if includeDefaults || self.hideStory != false {
            try container.encode(self.hideStory, forKey: "hideStory")
        }
        try container.encodeIfPresent(self.storySendMode, forKey: "storySendMode")
    }

}
#endif

/**
 * Subtypes within BackupProtoGroup
 */
extension BackupProtoGroup {

    public enum BackupProtoStorySendMode : Int32, CaseIterable, ProtoEnum, ProtoDefaultedValue {

        case DEFAULT = 0
        case DISABLED = 1
        case ENABLED = 2

        public static var defaultedValue: BackupProtoGroup.BackupProtoStorySendMode {
            BackupProtoGroup.BackupProtoStorySendMode.DEFAULT
        }
        public var description: String {
            switch self {
            case .DEFAULT: return "DEFAULT"
            case .DISABLED: return "DISABLED"
            case .ENABLED: return "ENABLED"
            }
        }

    }

}

extension BackupProtoGroup.BackupProtoStorySendMode : Sendable {
}
