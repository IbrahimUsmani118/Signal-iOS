//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoGroupChangeChatUpdate in Backup.proto
import Wire

public struct BackupProtoGroupChangeChatUpdate {

    /**
     * Must be one or more; all updates batched together came from
     * a single batched group state update.
     */
    public var updates: [BackupProtoGroupChangeChatUpdate.BackupProtoUpdate] = []
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupChangeChatUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupChangeChatUpdate : Hashable {
}
#endif

extension BackupProtoGroupChangeChatUpdate : Sendable {
}

extension BackupProtoGroupChangeChatUpdate : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoGroupChangeChatUpdate {
        BackupProtoGroupChangeChatUpdate()
    }
}

extension BackupProtoGroupChangeChatUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroupChangeChatUpdate"
    }

}

extension BackupProtoGroupChangeChatUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var updates: [BackupProtoGroupChangeChatUpdate.BackupProtoUpdate] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: try protoReader.decode(into: &updates)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.updates = updates
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.updates)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroupChangeChatUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.updates = try container.decodeProtoArray(BackupProtoGroupChangeChatUpdate.BackupProtoUpdate.self, forKey: "updates")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.updates.isEmpty {
            try container.encodeProtoArray(self.updates, forKey: "updates")
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoGroupChangeChatUpdate
 */
extension BackupProtoGroupChangeChatUpdate {

    public struct BackupProtoUpdate {

        /**
         * Note: group expiration timer changes are represented as ExpirationTimerChatUpdate.
         */
        public var update: BackupProtoGroupChangeChatUpdate.BackupProtoUpdate.Update?
        public var unknownFields: UnknownFields = .init()

        public init(configure: (inout Self) -> Swift.Void = { _ in }) {
            configure(&self)
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate : Hashable {
}
#endif

extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate : Sendable {
}

extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoGroupChangeChatUpdate.BackupProtoUpdate {
        BackupProtoGroupChangeChatUpdate.BackupProtoUpdate()
    }
}

extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroupChangeChatUpdate.BackupProtoUpdate"
    }

}

extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var update: BackupProtoGroupChangeChatUpdate.BackupProtoUpdate.Update? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: update = .genericGroupUpdate(try protoReader.decode(BackupProtoGenericGroupUpdate.self))
            case 2: update = .groupCreationUpdate(try protoReader.decode(BackupProtoGroupCreationUpdate.self))
            case 3: update = .groupNameUpdate(try protoReader.decode(BackupProtoGroupNameUpdate.self))
            case 4: update = .groupAvatarUpdate(try protoReader.decode(BackupProtoGroupAvatarUpdate.self))
            case 5: update = .groupDescriptionUpdate(try protoReader.decode(BackupProtoGroupDescriptionUpdate.self))
            case 6: update = .groupMembershipAccessLevelChangeUpdate(try protoReader.decode(BackupProtoGroupMembershipAccessLevelChangeUpdate.self))
            case 7: update = .groupAttributesAccessLevelChangeUpdate(try protoReader.decode(BackupProtoGroupAttributesAccessLevelChangeUpdate.self))
            case 8: update = .groupAnnouncementOnlyChangeUpdate(try protoReader.decode(BackupProtoGroupAnnouncementOnlyChangeUpdate.self))
            case 9: update = .groupAdminStatusUpdate(try protoReader.decode(BackupProtoGroupAdminStatusUpdate.self))
            case 10: update = .groupMemberLeftUpdate(try protoReader.decode(BackupProtoGroupMemberLeftUpdate.self))
            case 11: update = .groupMemberRemovedUpdate(try protoReader.decode(BackupProtoGroupMemberRemovedUpdate.self))
            case 12: update = .selfInvitedToGroupUpdate(try protoReader.decode(BackupProtoSelfInvitedToGroupUpdate.self))
            case 13: update = .selfInvitedOtherUserToGroupUpdate(try protoReader.decode(BackupProtoSelfInvitedOtherUserToGroupUpdate.self))
            case 14: update = .groupUnknownInviteeUpdate(try protoReader.decode(BackupProtoGroupUnknownInviteeUpdate.self))
            case 15: update = .groupInvitationAcceptedUpdate(try protoReader.decode(BackupProtoGroupInvitationAcceptedUpdate.self))
            case 16: update = .groupInvitationDeclinedUpdate(try protoReader.decode(BackupProtoGroupInvitationDeclinedUpdate.self))
            case 17: update = .groupMemberJoinedUpdate(try protoReader.decode(BackupProtoGroupMemberJoinedUpdate.self))
            case 18: update = .groupMemberAddedUpdate(try protoReader.decode(BackupProtoGroupMemberAddedUpdate.self))
            case 19: update = .groupSelfInvitationRevokedUpdate(try protoReader.decode(BackupProtoGroupSelfInvitationRevokedUpdate.self))
            case 20: update = .groupInvitationRevokedUpdate(try protoReader.decode(BackupProtoGroupInvitationRevokedUpdate.self))
            case 21: update = .groupJoinRequestUpdate(try protoReader.decode(BackupProtoGroupJoinRequestUpdate.self))
            case 22: update = .groupJoinRequestApprovalUpdate(try protoReader.decode(BackupProtoGroupJoinRequestApprovalUpdate.self))
            case 23: update = .groupJoinRequestCanceledUpdate(try protoReader.decode(BackupProtoGroupJoinRequestCanceledUpdate.self))
            case 24: update = .groupInviteLinkResetUpdate(try protoReader.decode(BackupProtoGroupInviteLinkResetUpdate.self))
            case 25: update = .groupInviteLinkEnabledUpdate(try protoReader.decode(BackupProtoGroupInviteLinkEnabledUpdate.self))
            case 26: update = .groupInviteLinkAdminApprovalUpdate(try protoReader.decode(BackupProtoGroupInviteLinkAdminApprovalUpdate.self))
            case 27: update = .groupInviteLinkDisabledUpdate(try protoReader.decode(BackupProtoGroupInviteLinkDisabledUpdate.self))
            case 28: update = .groupMemberJoinedByLinkUpdate(try protoReader.decode(BackupProtoGroupMemberJoinedByLinkUpdate.self))
            case 29: update = .groupV2MigrationUpdate(try protoReader.decode(BackupProtoGroupV2MigrationUpdate.self))
            case 30: update = .groupV2MigrationSelfInvitedUpdate(try protoReader.decode(BackupProtoGroupV2MigrationSelfInvitedUpdate.self))
            case 31: update = .groupV2MigrationInvitedMembersUpdate(try protoReader.decode(BackupProtoGroupV2MigrationInvitedMembersUpdate.self))
            case 32: update = .groupV2MigrationDroppedMembersUpdate(try protoReader.decode(BackupProtoGroupV2MigrationDroppedMembersUpdate.self))
            case 33: update = .groupSequenceOfRequestsAndCancelsUpdate(try protoReader.decode(BackupProtoGroupSequenceOfRequestsAndCancelsUpdate.self))
            case 34: update = .groupExpirationTimerUpdate(try protoReader.decode(BackupProtoGroupExpirationTimerUpdate.self))
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.update = update
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        if let update = self.update {
            try update.encode(to: protoWriter)
        }
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        if let genericGroupUpdate = try container.decodeIfPresent(BackupProtoGenericGroupUpdate.self, forKey: "genericGroupUpdate") {
            self.update = .genericGroupUpdate(genericGroupUpdate)
        } else if let groupCreationUpdate = try container.decodeIfPresent(BackupProtoGroupCreationUpdate.self, forKey: "groupCreationUpdate") {
            self.update = .groupCreationUpdate(groupCreationUpdate)
        } else if let groupNameUpdate = try container.decodeIfPresent(BackupProtoGroupNameUpdate.self, forKey: "groupNameUpdate") {
            self.update = .groupNameUpdate(groupNameUpdate)
        } else if let groupAvatarUpdate = try container.decodeIfPresent(BackupProtoGroupAvatarUpdate.self, forKey: "groupAvatarUpdate") {
            self.update = .groupAvatarUpdate(groupAvatarUpdate)
        } else if let groupDescriptionUpdate = try container.decodeIfPresent(BackupProtoGroupDescriptionUpdate.self, forKey: "groupDescriptionUpdate") {
            self.update = .groupDescriptionUpdate(groupDescriptionUpdate)
        } else if let groupMembershipAccessLevelChangeUpdate = try container.decodeIfPresent(BackupProtoGroupMembershipAccessLevelChangeUpdate.self, forKey: "groupMembershipAccessLevelChangeUpdate") {
            self.update = .groupMembershipAccessLevelChangeUpdate(groupMembershipAccessLevelChangeUpdate)
        } else if let groupAttributesAccessLevelChangeUpdate = try container.decodeIfPresent(BackupProtoGroupAttributesAccessLevelChangeUpdate.self, forKey: "groupAttributesAccessLevelChangeUpdate") {
            self.update = .groupAttributesAccessLevelChangeUpdate(groupAttributesAccessLevelChangeUpdate)
        } else if let groupAnnouncementOnlyChangeUpdate = try container.decodeIfPresent(BackupProtoGroupAnnouncementOnlyChangeUpdate.self, forKey: "groupAnnouncementOnlyChangeUpdate") {
            self.update = .groupAnnouncementOnlyChangeUpdate(groupAnnouncementOnlyChangeUpdate)
        } else if let groupAdminStatusUpdate = try container.decodeIfPresent(BackupProtoGroupAdminStatusUpdate.self, forKey: "groupAdminStatusUpdate") {
            self.update = .groupAdminStatusUpdate(groupAdminStatusUpdate)
        } else if let groupMemberLeftUpdate = try container.decodeIfPresent(BackupProtoGroupMemberLeftUpdate.self, forKey: "groupMemberLeftUpdate") {
            self.update = .groupMemberLeftUpdate(groupMemberLeftUpdate)
        } else if let groupMemberRemovedUpdate = try container.decodeIfPresent(BackupProtoGroupMemberRemovedUpdate.self, forKey: "groupMemberRemovedUpdate") {
            self.update = .groupMemberRemovedUpdate(groupMemberRemovedUpdate)
        } else if let selfInvitedToGroupUpdate = try container.decodeIfPresent(BackupProtoSelfInvitedToGroupUpdate.self, forKey: "selfInvitedToGroupUpdate") {
            self.update = .selfInvitedToGroupUpdate(selfInvitedToGroupUpdate)
        } else if let selfInvitedOtherUserToGroupUpdate = try container.decodeIfPresent(BackupProtoSelfInvitedOtherUserToGroupUpdate.self, forKey: "selfInvitedOtherUserToGroupUpdate") {
            self.update = .selfInvitedOtherUserToGroupUpdate(selfInvitedOtherUserToGroupUpdate)
        } else if let groupUnknownInviteeUpdate = try container.decodeIfPresent(BackupProtoGroupUnknownInviteeUpdate.self, forKey: "groupUnknownInviteeUpdate") {
            self.update = .groupUnknownInviteeUpdate(groupUnknownInviteeUpdate)
        } else if let groupInvitationAcceptedUpdate = try container.decodeIfPresent(BackupProtoGroupInvitationAcceptedUpdate.self, forKey: "groupInvitationAcceptedUpdate") {
            self.update = .groupInvitationAcceptedUpdate(groupInvitationAcceptedUpdate)
        } else if let groupInvitationDeclinedUpdate = try container.decodeIfPresent(BackupProtoGroupInvitationDeclinedUpdate.self, forKey: "groupInvitationDeclinedUpdate") {
            self.update = .groupInvitationDeclinedUpdate(groupInvitationDeclinedUpdate)
        } else if let groupMemberJoinedUpdate = try container.decodeIfPresent(BackupProtoGroupMemberJoinedUpdate.self, forKey: "groupMemberJoinedUpdate") {
            self.update = .groupMemberJoinedUpdate(groupMemberJoinedUpdate)
        } else if let groupMemberAddedUpdate = try container.decodeIfPresent(BackupProtoGroupMemberAddedUpdate.self, forKey: "groupMemberAddedUpdate") {
            self.update = .groupMemberAddedUpdate(groupMemberAddedUpdate)
        } else if let groupSelfInvitationRevokedUpdate = try container.decodeIfPresent(BackupProtoGroupSelfInvitationRevokedUpdate.self, forKey: "groupSelfInvitationRevokedUpdate") {
            self.update = .groupSelfInvitationRevokedUpdate(groupSelfInvitationRevokedUpdate)
        } else if let groupInvitationRevokedUpdate = try container.decodeIfPresent(BackupProtoGroupInvitationRevokedUpdate.self, forKey: "groupInvitationRevokedUpdate") {
            self.update = .groupInvitationRevokedUpdate(groupInvitationRevokedUpdate)
        } else if let groupJoinRequestUpdate = try container.decodeIfPresent(BackupProtoGroupJoinRequestUpdate.self, forKey: "groupJoinRequestUpdate") {
            self.update = .groupJoinRequestUpdate(groupJoinRequestUpdate)
        } else if let groupJoinRequestApprovalUpdate = try container.decodeIfPresent(BackupProtoGroupJoinRequestApprovalUpdate.self, forKey: "groupJoinRequestApprovalUpdate") {
            self.update = .groupJoinRequestApprovalUpdate(groupJoinRequestApprovalUpdate)
        } else if let groupJoinRequestCanceledUpdate = try container.decodeIfPresent(BackupProtoGroupJoinRequestCanceledUpdate.self, forKey: "groupJoinRequestCanceledUpdate") {
            self.update = .groupJoinRequestCanceledUpdate(groupJoinRequestCanceledUpdate)
        } else if let groupInviteLinkResetUpdate = try container.decodeIfPresent(BackupProtoGroupInviteLinkResetUpdate.self, forKey: "groupInviteLinkResetUpdate") {
            self.update = .groupInviteLinkResetUpdate(groupInviteLinkResetUpdate)
        } else if let groupInviteLinkEnabledUpdate = try container.decodeIfPresent(BackupProtoGroupInviteLinkEnabledUpdate.self, forKey: "groupInviteLinkEnabledUpdate") {
            self.update = .groupInviteLinkEnabledUpdate(groupInviteLinkEnabledUpdate)
        } else if let groupInviteLinkAdminApprovalUpdate = try container.decodeIfPresent(BackupProtoGroupInviteLinkAdminApprovalUpdate.self, forKey: "groupInviteLinkAdminApprovalUpdate") {
            self.update = .groupInviteLinkAdminApprovalUpdate(groupInviteLinkAdminApprovalUpdate)
        } else if let groupInviteLinkDisabledUpdate = try container.decodeIfPresent(BackupProtoGroupInviteLinkDisabledUpdate.self, forKey: "groupInviteLinkDisabledUpdate") {
            self.update = .groupInviteLinkDisabledUpdate(groupInviteLinkDisabledUpdate)
        } else if let groupMemberJoinedByLinkUpdate = try container.decodeIfPresent(BackupProtoGroupMemberJoinedByLinkUpdate.self, forKey: "groupMemberJoinedByLinkUpdate") {
            self.update = .groupMemberJoinedByLinkUpdate(groupMemberJoinedByLinkUpdate)
        } else if let groupV2MigrationUpdate = try container.decodeIfPresent(BackupProtoGroupV2MigrationUpdate.self, forKey: "groupV2MigrationUpdate") {
            self.update = .groupV2MigrationUpdate(groupV2MigrationUpdate)
        } else if let groupV2MigrationSelfInvitedUpdate = try container.decodeIfPresent(BackupProtoGroupV2MigrationSelfInvitedUpdate.self, forKey: "groupV2MigrationSelfInvitedUpdate") {
            self.update = .groupV2MigrationSelfInvitedUpdate(groupV2MigrationSelfInvitedUpdate)
        } else if let groupV2MigrationInvitedMembersUpdate = try container.decodeIfPresent(BackupProtoGroupV2MigrationInvitedMembersUpdate.self, forKey: "groupV2MigrationInvitedMembersUpdate") {
            self.update = .groupV2MigrationInvitedMembersUpdate(groupV2MigrationInvitedMembersUpdate)
        } else if let groupV2MigrationDroppedMembersUpdate = try container.decodeIfPresent(BackupProtoGroupV2MigrationDroppedMembersUpdate.self, forKey: "groupV2MigrationDroppedMembersUpdate") {
            self.update = .groupV2MigrationDroppedMembersUpdate(groupV2MigrationDroppedMembersUpdate)
        } else if let groupSequenceOfRequestsAndCancelsUpdate = try container.decodeIfPresent(BackupProtoGroupSequenceOfRequestsAndCancelsUpdate.self, forKey: "groupSequenceOfRequestsAndCancelsUpdate") {
            self.update = .groupSequenceOfRequestsAndCancelsUpdate(groupSequenceOfRequestsAndCancelsUpdate)
        } else if let groupExpirationTimerUpdate = try container.decodeIfPresent(BackupProtoGroupExpirationTimerUpdate.self, forKey: "groupExpirationTimerUpdate") {
            self.update = .groupExpirationTimerUpdate(groupExpirationTimerUpdate)
        } else {
            self.update = nil
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        switch self.update {
        case .genericGroupUpdate(let genericGroupUpdate): try container.encode(genericGroupUpdate, forKey: "genericGroupUpdate")
        case .groupCreationUpdate(let groupCreationUpdate): try container.encode(groupCreationUpdate, forKey: "groupCreationUpdate")
        case .groupNameUpdate(let groupNameUpdate): try container.encode(groupNameUpdate, forKey: "groupNameUpdate")
        case .groupAvatarUpdate(let groupAvatarUpdate): try container.encode(groupAvatarUpdate, forKey: "groupAvatarUpdate")
        case .groupDescriptionUpdate(let groupDescriptionUpdate): try container.encode(groupDescriptionUpdate, forKey: "groupDescriptionUpdate")
        case .groupMembershipAccessLevelChangeUpdate(let groupMembershipAccessLevelChangeUpdate): try container.encode(groupMembershipAccessLevelChangeUpdate, forKey: "groupMembershipAccessLevelChangeUpdate")
        case .groupAttributesAccessLevelChangeUpdate(let groupAttributesAccessLevelChangeUpdate): try container.encode(groupAttributesAccessLevelChangeUpdate, forKey: "groupAttributesAccessLevelChangeUpdate")
        case .groupAnnouncementOnlyChangeUpdate(let groupAnnouncementOnlyChangeUpdate): try container.encode(groupAnnouncementOnlyChangeUpdate, forKey: "groupAnnouncementOnlyChangeUpdate")
        case .groupAdminStatusUpdate(let groupAdminStatusUpdate): try container.encode(groupAdminStatusUpdate, forKey: "groupAdminStatusUpdate")
        case .groupMemberLeftUpdate(let groupMemberLeftUpdate): try container.encode(groupMemberLeftUpdate, forKey: "groupMemberLeftUpdate")
        case .groupMemberRemovedUpdate(let groupMemberRemovedUpdate): try container.encode(groupMemberRemovedUpdate, forKey: "groupMemberRemovedUpdate")
        case .selfInvitedToGroupUpdate(let selfInvitedToGroupUpdate): try container.encode(selfInvitedToGroupUpdate, forKey: "selfInvitedToGroupUpdate")
        case .selfInvitedOtherUserToGroupUpdate(let selfInvitedOtherUserToGroupUpdate): try container.encode(selfInvitedOtherUserToGroupUpdate, forKey: "selfInvitedOtherUserToGroupUpdate")
        case .groupUnknownInviteeUpdate(let groupUnknownInviteeUpdate): try container.encode(groupUnknownInviteeUpdate, forKey: "groupUnknownInviteeUpdate")
        case .groupInvitationAcceptedUpdate(let groupInvitationAcceptedUpdate): try container.encode(groupInvitationAcceptedUpdate, forKey: "groupInvitationAcceptedUpdate")
        case .groupInvitationDeclinedUpdate(let groupInvitationDeclinedUpdate): try container.encode(groupInvitationDeclinedUpdate, forKey: "groupInvitationDeclinedUpdate")
        case .groupMemberJoinedUpdate(let groupMemberJoinedUpdate): try container.encode(groupMemberJoinedUpdate, forKey: "groupMemberJoinedUpdate")
        case .groupMemberAddedUpdate(let groupMemberAddedUpdate): try container.encode(groupMemberAddedUpdate, forKey: "groupMemberAddedUpdate")
        case .groupSelfInvitationRevokedUpdate(let groupSelfInvitationRevokedUpdate): try container.encode(groupSelfInvitationRevokedUpdate, forKey: "groupSelfInvitationRevokedUpdate")
        case .groupInvitationRevokedUpdate(let groupInvitationRevokedUpdate): try container.encode(groupInvitationRevokedUpdate, forKey: "groupInvitationRevokedUpdate")
        case .groupJoinRequestUpdate(let groupJoinRequestUpdate): try container.encode(groupJoinRequestUpdate, forKey: "groupJoinRequestUpdate")
        case .groupJoinRequestApprovalUpdate(let groupJoinRequestApprovalUpdate): try container.encode(groupJoinRequestApprovalUpdate, forKey: "groupJoinRequestApprovalUpdate")
        case .groupJoinRequestCanceledUpdate(let groupJoinRequestCanceledUpdate): try container.encode(groupJoinRequestCanceledUpdate, forKey: "groupJoinRequestCanceledUpdate")
        case .groupInviteLinkResetUpdate(let groupInviteLinkResetUpdate): try container.encode(groupInviteLinkResetUpdate, forKey: "groupInviteLinkResetUpdate")
        case .groupInviteLinkEnabledUpdate(let groupInviteLinkEnabledUpdate): try container.encode(groupInviteLinkEnabledUpdate, forKey: "groupInviteLinkEnabledUpdate")
        case .groupInviteLinkAdminApprovalUpdate(let groupInviteLinkAdminApprovalUpdate): try container.encode(groupInviteLinkAdminApprovalUpdate, forKey: "groupInviteLinkAdminApprovalUpdate")
        case .groupInviteLinkDisabledUpdate(let groupInviteLinkDisabledUpdate): try container.encode(groupInviteLinkDisabledUpdate, forKey: "groupInviteLinkDisabledUpdate")
        case .groupMemberJoinedByLinkUpdate(let groupMemberJoinedByLinkUpdate): try container.encode(groupMemberJoinedByLinkUpdate, forKey: "groupMemberJoinedByLinkUpdate")
        case .groupV2MigrationUpdate(let groupV2MigrationUpdate): try container.encode(groupV2MigrationUpdate, forKey: "groupV2MigrationUpdate")
        case .groupV2MigrationSelfInvitedUpdate(let groupV2MigrationSelfInvitedUpdate): try container.encode(groupV2MigrationSelfInvitedUpdate, forKey: "groupV2MigrationSelfInvitedUpdate")
        case .groupV2MigrationInvitedMembersUpdate(let groupV2MigrationInvitedMembersUpdate): try container.encode(groupV2MigrationInvitedMembersUpdate, forKey: "groupV2MigrationInvitedMembersUpdate")
        case .groupV2MigrationDroppedMembersUpdate(let groupV2MigrationDroppedMembersUpdate): try container.encode(groupV2MigrationDroppedMembersUpdate, forKey: "groupV2MigrationDroppedMembersUpdate")
        case .groupSequenceOfRequestsAndCancelsUpdate(let groupSequenceOfRequestsAndCancelsUpdate): try container.encode(groupSequenceOfRequestsAndCancelsUpdate, forKey: "groupSequenceOfRequestsAndCancelsUpdate")
        case .groupExpirationTimerUpdate(let groupExpirationTimerUpdate): try container.encode(groupExpirationTimerUpdate, forKey: "groupExpirationTimerUpdate")
        case Optional.none: break
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoGroupChangeChatUpdate.BackupProtoUpdate
 */
extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate {

    public enum Update {

        case genericGroupUpdate(BackupProtoGenericGroupUpdate)
        case groupCreationUpdate(BackupProtoGroupCreationUpdate)
        case groupNameUpdate(BackupProtoGroupNameUpdate)
        case groupAvatarUpdate(BackupProtoGroupAvatarUpdate)
        case groupDescriptionUpdate(BackupProtoGroupDescriptionUpdate)
        case groupMembershipAccessLevelChangeUpdate(BackupProtoGroupMembershipAccessLevelChangeUpdate)
        case groupAttributesAccessLevelChangeUpdate(BackupProtoGroupAttributesAccessLevelChangeUpdate)
        case groupAnnouncementOnlyChangeUpdate(BackupProtoGroupAnnouncementOnlyChangeUpdate)
        case groupAdminStatusUpdate(BackupProtoGroupAdminStatusUpdate)
        case groupMemberLeftUpdate(BackupProtoGroupMemberLeftUpdate)
        case groupMemberRemovedUpdate(BackupProtoGroupMemberRemovedUpdate)
        case selfInvitedToGroupUpdate(BackupProtoSelfInvitedToGroupUpdate)
        case selfInvitedOtherUserToGroupUpdate(BackupProtoSelfInvitedOtherUserToGroupUpdate)
        case groupUnknownInviteeUpdate(BackupProtoGroupUnknownInviteeUpdate)
        case groupInvitationAcceptedUpdate(BackupProtoGroupInvitationAcceptedUpdate)
        case groupInvitationDeclinedUpdate(BackupProtoGroupInvitationDeclinedUpdate)
        case groupMemberJoinedUpdate(BackupProtoGroupMemberJoinedUpdate)
        case groupMemberAddedUpdate(BackupProtoGroupMemberAddedUpdate)
        case groupSelfInvitationRevokedUpdate(BackupProtoGroupSelfInvitationRevokedUpdate)
        case groupInvitationRevokedUpdate(BackupProtoGroupInvitationRevokedUpdate)
        case groupJoinRequestUpdate(BackupProtoGroupJoinRequestUpdate)
        case groupJoinRequestApprovalUpdate(BackupProtoGroupJoinRequestApprovalUpdate)
        case groupJoinRequestCanceledUpdate(BackupProtoGroupJoinRequestCanceledUpdate)
        case groupInviteLinkResetUpdate(BackupProtoGroupInviteLinkResetUpdate)
        case groupInviteLinkEnabledUpdate(BackupProtoGroupInviteLinkEnabledUpdate)
        case groupInviteLinkAdminApprovalUpdate(BackupProtoGroupInviteLinkAdminApprovalUpdate)
        case groupInviteLinkDisabledUpdate(BackupProtoGroupInviteLinkDisabledUpdate)
        case groupMemberJoinedByLinkUpdate(BackupProtoGroupMemberJoinedByLinkUpdate)
        case groupV2MigrationUpdate(BackupProtoGroupV2MigrationUpdate)
        case groupV2MigrationSelfInvitedUpdate(BackupProtoGroupV2MigrationSelfInvitedUpdate)
        case groupV2MigrationInvitedMembersUpdate(BackupProtoGroupV2MigrationInvitedMembersUpdate)
        case groupV2MigrationDroppedMembersUpdate(BackupProtoGroupV2MigrationDroppedMembersUpdate)
        case groupSequenceOfRequestsAndCancelsUpdate(BackupProtoGroupSequenceOfRequestsAndCancelsUpdate)
        case groupExpirationTimerUpdate(BackupProtoGroupExpirationTimerUpdate)

        fileprivate func encode(to protoWriter: ProtoWriter) throws {
            switch self {
            case .genericGroupUpdate(let genericGroupUpdate): try protoWriter.encode(tag: 1, value: genericGroupUpdate)
            case .groupCreationUpdate(let groupCreationUpdate): try protoWriter.encode(tag: 2, value: groupCreationUpdate)
            case .groupNameUpdate(let groupNameUpdate): try protoWriter.encode(tag: 3, value: groupNameUpdate)
            case .groupAvatarUpdate(let groupAvatarUpdate): try protoWriter.encode(tag: 4, value: groupAvatarUpdate)
            case .groupDescriptionUpdate(let groupDescriptionUpdate): try protoWriter.encode(tag: 5, value: groupDescriptionUpdate)
            case .groupMembershipAccessLevelChangeUpdate(let groupMembershipAccessLevelChangeUpdate): try protoWriter.encode(tag: 6, value: groupMembershipAccessLevelChangeUpdate)
            case .groupAttributesAccessLevelChangeUpdate(let groupAttributesAccessLevelChangeUpdate): try protoWriter.encode(tag: 7, value: groupAttributesAccessLevelChangeUpdate)
            case .groupAnnouncementOnlyChangeUpdate(let groupAnnouncementOnlyChangeUpdate): try protoWriter.encode(tag: 8, value: groupAnnouncementOnlyChangeUpdate)
            case .groupAdminStatusUpdate(let groupAdminStatusUpdate): try protoWriter.encode(tag: 9, value: groupAdminStatusUpdate)
            case .groupMemberLeftUpdate(let groupMemberLeftUpdate): try protoWriter.encode(tag: 10, value: groupMemberLeftUpdate)
            case .groupMemberRemovedUpdate(let groupMemberRemovedUpdate): try protoWriter.encode(tag: 11, value: groupMemberRemovedUpdate)
            case .selfInvitedToGroupUpdate(let selfInvitedToGroupUpdate): try protoWriter.encode(tag: 12, value: selfInvitedToGroupUpdate)
            case .selfInvitedOtherUserToGroupUpdate(let selfInvitedOtherUserToGroupUpdate): try protoWriter.encode(tag: 13, value: selfInvitedOtherUserToGroupUpdate)
            case .groupUnknownInviteeUpdate(let groupUnknownInviteeUpdate): try protoWriter.encode(tag: 14, value: groupUnknownInviteeUpdate)
            case .groupInvitationAcceptedUpdate(let groupInvitationAcceptedUpdate): try protoWriter.encode(tag: 15, value: groupInvitationAcceptedUpdate)
            case .groupInvitationDeclinedUpdate(let groupInvitationDeclinedUpdate): try protoWriter.encode(tag: 16, value: groupInvitationDeclinedUpdate)
            case .groupMemberJoinedUpdate(let groupMemberJoinedUpdate): try protoWriter.encode(tag: 17, value: groupMemberJoinedUpdate)
            case .groupMemberAddedUpdate(let groupMemberAddedUpdate): try protoWriter.encode(tag: 18, value: groupMemberAddedUpdate)
            case .groupSelfInvitationRevokedUpdate(let groupSelfInvitationRevokedUpdate): try protoWriter.encode(tag: 19, value: groupSelfInvitationRevokedUpdate)
            case .groupInvitationRevokedUpdate(let groupInvitationRevokedUpdate): try protoWriter.encode(tag: 20, value: groupInvitationRevokedUpdate)
            case .groupJoinRequestUpdate(let groupJoinRequestUpdate): try protoWriter.encode(tag: 21, value: groupJoinRequestUpdate)
            case .groupJoinRequestApprovalUpdate(let groupJoinRequestApprovalUpdate): try protoWriter.encode(tag: 22, value: groupJoinRequestApprovalUpdate)
            case .groupJoinRequestCanceledUpdate(let groupJoinRequestCanceledUpdate): try protoWriter.encode(tag: 23, value: groupJoinRequestCanceledUpdate)
            case .groupInviteLinkResetUpdate(let groupInviteLinkResetUpdate): try protoWriter.encode(tag: 24, value: groupInviteLinkResetUpdate)
            case .groupInviteLinkEnabledUpdate(let groupInviteLinkEnabledUpdate): try protoWriter.encode(tag: 25, value: groupInviteLinkEnabledUpdate)
            case .groupInviteLinkAdminApprovalUpdate(let groupInviteLinkAdminApprovalUpdate): try protoWriter.encode(tag: 26, value: groupInviteLinkAdminApprovalUpdate)
            case .groupInviteLinkDisabledUpdate(let groupInviteLinkDisabledUpdate): try protoWriter.encode(tag: 27, value: groupInviteLinkDisabledUpdate)
            case .groupMemberJoinedByLinkUpdate(let groupMemberJoinedByLinkUpdate): try protoWriter.encode(tag: 28, value: groupMemberJoinedByLinkUpdate)
            case .groupV2MigrationUpdate(let groupV2MigrationUpdate): try protoWriter.encode(tag: 29, value: groupV2MigrationUpdate)
            case .groupV2MigrationSelfInvitedUpdate(let groupV2MigrationSelfInvitedUpdate): try protoWriter.encode(tag: 30, value: groupV2MigrationSelfInvitedUpdate)
            case .groupV2MigrationInvitedMembersUpdate(let groupV2MigrationInvitedMembersUpdate): try protoWriter.encode(tag: 31, value: groupV2MigrationInvitedMembersUpdate)
            case .groupV2MigrationDroppedMembersUpdate(let groupV2MigrationDroppedMembersUpdate): try protoWriter.encode(tag: 32, value: groupV2MigrationDroppedMembersUpdate)
            case .groupSequenceOfRequestsAndCancelsUpdate(let groupSequenceOfRequestsAndCancelsUpdate): try protoWriter.encode(tag: 33, value: groupSequenceOfRequestsAndCancelsUpdate)
            case .groupExpirationTimerUpdate(let groupExpirationTimerUpdate): try protoWriter.encode(tag: 34, value: groupExpirationTimerUpdate)
            }
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate.Update : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate.Update : Hashable {
}
#endif

extension BackupProtoGroupChangeChatUpdate.BackupProtoUpdate.Update : Sendable {
}
