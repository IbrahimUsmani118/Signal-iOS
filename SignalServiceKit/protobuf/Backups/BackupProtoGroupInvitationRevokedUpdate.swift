//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoGroupInvitationRevokedUpdate in Backup.proto
import Foundation
import Wire

/**
 * These invitees should never be the local user.
 * Use GroupSelfInvitationRevokedUpdate in those cases.
 * The inviter or updater can be the local user.
 */
public struct BackupProtoGroupInvitationRevokedUpdate {

    /**
     * The member that revoked the invite(s), not the inviter!
     * Assumed to be an admin (at the time, may no longer be an
     * admin or even a member).
     */
    @ProtoDefaulted
    public var updaterAci: Foundation.Data?
    public var invitees: [BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee] = []
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupInvitationRevokedUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupInvitationRevokedUpdate : Hashable {
}
#endif

extension BackupProtoGroupInvitationRevokedUpdate : Sendable {
}

extension BackupProtoGroupInvitationRevokedUpdate : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoGroupInvitationRevokedUpdate {
        BackupProtoGroupInvitationRevokedUpdate()
    }
}

extension BackupProtoGroupInvitationRevokedUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroupInvitationRevokedUpdate"
    }

}

extension BackupProtoGroupInvitationRevokedUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var updaterAci: Foundation.Data? = nil
        var invitees: [BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: updaterAci = try protoReader.decode(Foundation.Data.self)
            case 2: try protoReader.decode(into: &invitees)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._updaterAci.wrappedValue = updaterAci
        self.invitees = invitees
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.updaterAci)
        try protoWriter.encode(tag: 2, value: self.invitees)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroupInvitationRevokedUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._updaterAci.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "updaterAci")
        self.invitees = try container.decodeProtoArray(BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee.self, forKey: "invitees")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        try container.encodeIfPresent(stringEncoded: self.updaterAci, forKey: "updaterAci")
        if includeDefaults || !self.invitees.isEmpty {
            try container.encodeProtoArray(self.invitees, forKey: "invitees")
        }
    }

}
#endif

/**
 * Subtypes within BackupProtoGroupInvitationRevokedUpdate
 */
extension BackupProtoGroupInvitationRevokedUpdate {

    public struct BackupProtoInvitee {

        @ProtoDefaulted
        public var inviterAci: Foundation.Data?
        /**
         * Prefer to use aci over pni. No need to set
         * pni if aci is set. Both can be missing.
         */
        @ProtoDefaulted
        public var inviteeAci: Foundation.Data?
        @ProtoDefaulted
        public var inviteePni: Foundation.Data?
        public var unknownFields: UnknownFields = .init()

        public init(configure: (inout Self) -> Swift.Void = { _ in }) {
            configure(&self)
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee : Hashable {
}
#endif

extension BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee : Sendable {
}

extension BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee : ProtoDefaultedValue {

    public static var defaultedValue: BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee {
        BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee()
    }
}

extension BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee"
    }

}

extension BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var inviterAci: Foundation.Data? = nil
        var inviteeAci: Foundation.Data? = nil
        var inviteePni: Foundation.Data? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: inviterAci = try protoReader.decode(Foundation.Data.self)
            case 2: inviteeAci = try protoReader.decode(Foundation.Data.self)
            case 3: inviteePni = try protoReader.decode(Foundation.Data.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._inviterAci.wrappedValue = inviterAci
        self._inviteeAci.wrappedValue = inviteeAci
        self._inviteePni.wrappedValue = inviteePni
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.inviterAci)
        try protoWriter.encode(tag: 2, value: self.inviteeAci)
        try protoWriter.encode(tag: 3, value: self.inviteePni)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroupInvitationRevokedUpdate.BackupProtoInvitee : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._inviterAci.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "inviterAci")
        self._inviteeAci.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "inviteeAci")
        self._inviteePni.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "inviteePni")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(stringEncoded: self.inviterAci, forKey: "inviterAci")
        try container.encodeIfPresent(stringEncoded: self.inviteeAci, forKey: "inviteeAci")
        try container.encodeIfPresent(stringEncoded: self.inviteePni, forKey: "inviteePni")
    }

}
#endif
