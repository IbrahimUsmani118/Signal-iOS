//
// Copyright 2024 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BackupProto.BackupProtoGroupCallChatUpdate in Backup.proto
import Foundation
import Wire

public struct BackupProtoGroupCallChatUpdate {

    @ProtoDefaulted
    public var startedCallAci: Foundation.Data?
    public var startedCallTimestamp: UInt64
    public var inCallAcis: [Foundation.Data] = []
    public var unknownFields: UnknownFields = .init()

    public init(startedCallTimestamp: UInt64, configure: (inout Self) -> Swift.Void = { _ in }) {
        self.startedCallTimestamp = startedCallTimestamp
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BackupProtoGroupCallChatUpdate : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BackupProtoGroupCallChatUpdate : Hashable {
}
#endif

extension BackupProtoGroupCallChatUpdate : Sendable {
}

extension BackupProtoGroupCallChatUpdate : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/BackupProto.BackupProtoGroupCallChatUpdate"
    }

}

extension BackupProtoGroupCallChatUpdate : Proto3Codable {

    public init(from protoReader: ProtoReader) throws {
        var startedCallAci: Foundation.Data? = nil
        var startedCallTimestamp: UInt64 = 0
        var inCallAcis: [Foundation.Data] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: startedCallAci = try protoReader.decode(Foundation.Data.self)
            case 2: startedCallTimestamp = try protoReader.decode(UInt64.self)
            case 3: try protoReader.decode(into: &inCallAcis)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._startedCallAci.wrappedValue = startedCallAci
        self.startedCallTimestamp = startedCallTimestamp
        self.inCallAcis = inCallAcis
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.startedCallAci)
        try protoWriter.encode(tag: 2, value: self.startedCallTimestamp)
        try protoWriter.encode(tag: 3, value: self.inCallAcis)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension BackupProtoGroupCallChatUpdate : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._startedCallAci.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, forKey: "startedCallAci")
        self.startedCallTimestamp = try container.decode(stringEncoded: UInt64.self, forKey: "startedCallTimestamp")
        self.inCallAcis = try container.decodeProtoArray(Foundation.Data.self, forKey: "inCallAcis")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        try container.encodeIfPresent(stringEncoded: self.startedCallAci, forKey: "startedCallAci")
        if includeDefaults || self.startedCallTimestamp != 0 {
            try container.encode(stringEncoded: self.startedCallTimestamp, forKey: "startedCallTimestamp")
        }
        if includeDefaults || !self.inCallAcis.isEmpty {
            try container.encodeProtoArray(self.inCallAcis, forKey: "inCallAcis")
        }
    }

}
#endif
