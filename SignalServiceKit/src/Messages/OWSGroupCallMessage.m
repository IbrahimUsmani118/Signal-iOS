//
//  Copyright (c) 2020 Open Whisper Systems. All rights reserved.
//

#import "OWSGroupCallMessage.h"
#import "TSGroupThread.h"
#import <SignalCoreKit/NSDate+OWS.h>
#import <SignalServiceKit/FunctionalUtil.h>
#import <SignalServiceKit/SignalServiceKit-Swift.h>

NS_ASSUME_NONNULL_BEGIN

@interface OWSGroupCallMessage ()

@property (nonatomic, getter=wasRead) BOOL read;

@property (nonatomic, nullable) NSData *conferenceId;
@property (nonatomic, nullable) NSArray<NSString *> *participantUuids;
@property (nonatomic, nullable) NSString *originatorUuid;
@property (nonatomic) BOOL hasCallEnded;

@end

#pragma mark -

@implementation OWSGroupCallMessage

- (instancetype)initWithPeekInfo:(PeekInfo *)peekInfo
                          thread:(TSGroupThread *)thread
                 sentAtTimestamp:(uint64_t)sentAtTimestamp
{
    self = [super initInteractionWithTimestamp:sentAtTimestamp thread:thread];

    if (!self) {
        return self;
    }

    // TODO: set things from PeekInfo

    return self;
}

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run
// `sds_codegen.sh`.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
             receivedAtTimestamp:(uint64_t)receivedAtTimestamp
                          sortId:(uint64_t)sortId
                       timestamp:(uint64_t)timestamp
                  uniqueThreadId:(NSString *)uniqueThreadId
                    conferenceId:(nullable NSData *)conferenceId
                    hasCallEnded:(BOOL)hasCallEnded
                  originatorUuid:(nullable NSString *)originatorUuid
                participantUuids:(nullable NSArray<NSString *> *)participantUuids
                            read:(BOOL)read
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId
               receivedAtTimestamp:receivedAtTimestamp
                            sortId:sortId
                         timestamp:timestamp
                    uniqueThreadId:uniqueThreadId];

    if (!self) {
        return self;
    }

    _conferenceId = conferenceId;
    _hasCallEnded = hasCallEnded;
    _originatorUuid = originatorUuid;
    _participantUuids = participantUuids;
    _read = read;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

- (nullable instancetype)initWithCoder:(NSCoder *)coder
{
    return [super initWithCoder:coder];
}

- (NSArray<SignalServiceAddress *> *)participantAddresses
{
    return [self.participantUuids
        map:^(NSString *uuidString) { return [[SignalServiceAddress alloc] initWithUuidString:uuidString]; }];
}

- (SignalServiceAddress *)originatorAddress
{
    return [[SignalServiceAddress alloc] initWithUuidString:self.originatorUuid];
}

- (OWSInteractionType)interactionType
{
    return OWSInteractionType_Call;
}

#pragma mark - OWSReadTracking

- (uint64_t)expireStartedAt
{
    return 0;
}

- (BOOL)shouldAffectUnreadCounts
{
    return YES;
}

- (void)markAsReadAtTimestamp:(uint64_t)readTimestamp
                       thread:(TSThread *)thread
                 circumstance:(OWSReadCircumstance)circumstance
                  transaction:(SDSAnyWriteTransaction *)transaction
{

    OWSAssertDebug(transaction);

    if (self.read) {
        return;
    }

    OWSLogDebug(@"marking as read uniqueId: %@ which has timestamp: %llu", self.uniqueId, self.timestamp);

    [self anyUpdateGroupCallMessageWithTransaction:transaction
                                             block:^(OWSGroupCallMessage *groupCallMessage) {
                                                 groupCallMessage.read = YES;
                                             }];

    // Ignore `circumstance` - we never send read receipts for calls.
}

#pragma mark - Methods

- (NSString *)previewTextWithTransaction:(SDSAnyReadTransaction *)transaction
{
    // TODO: Return "Originator started the call" here
    return @"Call started";
}

- (NSString *)systemTextWithTransaction:(SDSAnyReadTransaction *)transaction
{
    // TODO: Return the dynamic list of participants, etc. here
    return @"Some text for in the conversation";
}

- (void)updateWithPeekInfo:(PeekInfo *)peekInfo transaction:(SDSAnyWriteTransaction *)transaction
{
    [self anyUpdateGroupCallMessageWithTransaction:transaction
                                             block:^(OWSGroupCallMessage *groupCallMessage) {
                                                 // TODO: Set values from PeekInfo
                                             }];
}

@end

NS_ASSUME_NONNULL_END
