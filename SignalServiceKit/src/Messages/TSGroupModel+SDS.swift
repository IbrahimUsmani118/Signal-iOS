//
//  Copyright (c) 2019 Open Whisper Systems. All rights reserved.
//

import Foundation
import GRDBCipher
import SignalCoreKit

// NOTE: This file is generated by /Users/matthew/code/workspace/ows/Signal-iOS-2/Scripts/sds_codegen/sds_generate.py.
// Do not manually edit it, instead run `sds_codegen.sh`.

// MARK: - SDSSerializable

extension TSGroupModel: SDSSerializable {
    public var serializer: SDSSerializer {
        // To support models with a rich class hierarchy,
        // we need to do a "depth first" search by type.
        switch self {
        default:
            return TSGroupModelSerializer(model: self)
        }
    }
}

// MARK: - Table Metadata

extension TSGroupModelSerializer {

    // This defines all of the columns used in the table
    // where this model (and any subclasses) are persisted.
    static let recordTypeColumn = SDSColumnMetadata(columnName: "recordType", columnType: .int, columnIndex: 0)
    static let uniqueIdColumn = SDSColumnMetadata(columnName: "uniqueId", columnType: .unicodeString, columnIndex: 1)
    static let groupIdColumn = SDSColumnMetadata(columnName: "groupId", columnType: .blob, columnIndex: 2)
    static let groupMemberIdsColumn = SDSColumnMetadata(columnName: "groupMemberIds", columnType: .blob, columnIndex: 3)
    static let groupNameColumn = SDSColumnMetadata(columnName: "groupName", columnType: .unicodeString, isOptional: true, columnIndex: 4)

    // TODO: We should decide on a naming convention for
    //       tables that store models.
    public static let table = SDSTableMetadata(tableName: "model_TSGroupModel", columns: [
        recordTypeColumn,
        uniqueIdColumn,
        groupIdColumn,
        groupMemberIdsColumn,
        groupNameColumn
        ])

}

// MARK: - Deserialization

extension TSGroupModelSerializer {
    // This method defines how to deserialize a model, given a
    // database row.  The recordType column is used to determine
    // the corresponding model class.
    class func sdsDeserialize(statement: SelectStatement) throws -> TSGroupModel {

        if OWSIsDebugBuild() {
            guard statement.columnNames == table.selectColumnNames else {
                owsFailDebug("Unexpected columns: \(statement.columnNames) != \(table.selectColumnNames)")
                throw SDSError.invalidResult
            }
        }

        // SDSDeserializer is used to convert column values into Swift values.
        let deserializer = SDSDeserializer(sqliteStatement: statement.sqliteStatement)
        let recordTypeValue = try deserializer.int(at: 0)
        guard let recordType = SDSRecordType(rawValue: UInt(recordTypeValue)) else {
            owsFailDebug("Invalid recordType: \(recordTypeValue)")
            throw SDSError.invalidResult
        }
        switch recordType {
        case .groupModel:
            let uniqueId = try deserializer.optionalString(at: uniqueIdColumn.columnIndex)
            let groupId = try deserializer.blob(at: groupIdColumn.columnIndex)
            let groupMemberIdsSerialized: Data = try deserializer.blob(at: groupMemberIdsColumn.columnIndex)
            let groupMemberIds: [String] = try SDSDeserializer.unarchive(groupMemberIdsSerialized)
            let groupName = try deserializer.optionalString(at: groupNameColumn.columnIndex)

            return TSGroupModel(uniqueId: uniqueId, groupId: groupId, groupMemberIds: groupMemberIds, groupName: groupName)
        default:
            owsFail("Invalid record type \(recordType)")
        }
    }
}

// MARK: - Save

@objc
extension TSGroupModel {

    @objc
    public func anySave(transaction: SDSAnyWriteTransaction) {
        if let grdbTransaction = transaction.transitional_grdbWriteTransaction {
            SDSSerialization.save(entity: self, transaction: grdbTransaction)
        } else if let ydbTransaction = transaction.transitional_yapWriteTransaction {
            self.save(with: ydbTransaction)
        } else {
            owsFailDebug("Invalid transaction")
        }
    }
}

// TODO: Add remove/delete method.

// MARK: - Fetch

// This category defines various fetch methods.
//
// TODO: We may eventually want to define some combination of:
//
// * fetchCursor, fetchOne, fetchAll, etc. (ala GRDB)
// * Optional "where clause" parameters for filtering.
// * Async flavors with completions.
//
// TODO: I've defined flavors that take a read transation or SDSDatabaseStorage.
//       We might want only the former.  Or we might take a "connection" if we
//       end up having that class.
@objc
extension TSGroupModel {
    @objc
    public class func anyFetchAll(databaseStorage: SDSDatabaseStorage) -> [TSGroupModel] {
        var result = [TSGroupModel]()
        databaseStorage.readSwallowingErrors { (transaction) in
            result += anyFetchAll(transaction: transaction)
        }
        return result
    }

    @objc
    public class func anyFetchAll(transaction: SDSAnyReadTransaction) -> [TSGroupModel] {
        var result = [TSGroupModel]()
        if let grdbTransaction = transaction.transitional_grdbReadTransaction {
            result += SDSSerialization.fetchAll(tableMetadata: TSGroupModelSerializer.table,
                                                uniqueIdColumnName: TSGroupModelSerializer.uniqueIdColumn.columnName,
                                                transaction: grdbTransaction,
                                                deserialize: { (statement) in
                                                    return try TSGroupModelSerializer.sdsDeserialize(statement: statement)
            })
        } else if let ydbTransaction = transaction.transitional_yapReadTransaction {
            TSGroupModel.enumerateCollectionObjects(with: ydbTransaction) { (object, _) in
                guard let model = object as? TSGroupModel else {
                    owsFailDebug("unexpected object: \(type(of: object))")
                    return
                }
                result.append(model)
            }
        } else {
            owsFailDebug("Invalid transaction")
        }
        return result
    }
}

// TODO: Add remove/delete method.

// MARK: - SDSSerializer

// The SDSSerializer protocol specifies how to insert and update the
// row that corresponds to this model.
class TSGroupModelSerializer: SDSSerializer {

    private let model: TSGroupModel
    public required init(model: TSGroupModel) {
        self.model = model
    }

    public func serializableColumnTableMetadata() -> SDSTableMetadata {
        return TSGroupModelSerializer.table
    }

    public func insertColumnNames() -> [String] {
        // When we insert a new row, we include the following columns:
        //
        // * "record type"
        // * "unique id"
        // * ...all columns that we set when updating.
        return [
            TSGroupModelSerializer.recordTypeColumn.columnName,
            uniqueIdColumnName()
            ] + updateColumnNames()

    }

    public func insertColumnValues() -> [DatabaseValueConvertible] {
        let result: [DatabaseValueConvertible] = [
            SDSRecordType.groupModel.rawValue
            ] + [uniqueIdColumnValue()] + updateColumnValues()
        if OWSIsDebugBuild() {
            if result.count != insertColumnNames().count {
                owsFailDebug("Update mismatch: \(result.count) != \(insertColumnNames().count)")
            }
        }
        return result
    }

    public func updateColumnNames() -> [String] {
        return [
            TSGroupModelSerializer.groupIdColumn,
            TSGroupModelSerializer.groupMemberIdsColumn,
            TSGroupModelSerializer.groupNameColumn
            ].map { $0.columnName }
    }

    public func updateColumnValues() -> [DatabaseValueConvertible] {
        let result: [DatabaseValueConvertible] = [
            self.model.groupId,
            SDSDeserializer.archive(self.model.groupMemberIds) ?? DatabaseValue.null,
            self.model.groupName ?? DatabaseValue.null

        ]
        if OWSIsDebugBuild() {
            if result.count != updateColumnNames().count {
                owsFailDebug("Update mismatch: \(result.count) != \(updateColumnNames().count)")
            }
        }
        return result
    }

    public func uniqueIdColumnName() -> String {
        return TSGroupModelSerializer.uniqueIdColumn.columnName
    }

    // TODO: uniqueId is currently an optional on our models.
    //       We should probably make the return type here String?
    public func uniqueIdColumnValue() -> DatabaseValueConvertible {
        // FIXME remove force unwrap
        return model.uniqueId!
    }
}
