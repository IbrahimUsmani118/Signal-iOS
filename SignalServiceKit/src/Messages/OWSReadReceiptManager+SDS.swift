//
//  Copyright (c) 2019 Open Whisper Systems. All rights reserved.
//

import Foundation
import GRDBCipher
import SignalCoreKit

// NOTE: This file is generated by /Scripts/sds_codegen/sds_generate.py.
// Do not manually edit it, instead run `sds_codegen.sh`.

// MARK: - SDSSerializable

extension TSRecipientReadReceipt: SDSSerializable {
    public var serializer: SDSSerializer {
        // Any subclass can be cast to it's superclass,
        // so the order of this switch statement matters.
        // We need to do a "depth first" search by type.
        switch self {
        default:
            return TSRecipientReadReceiptSerializer(model: self)
        }
    }
}

// MARK: - Table Metadata

extension TSRecipientReadReceiptSerializer {

    // This defines all of the columns used in the table
    // where this model (and any subclasses) are persisted.
    static let recordTypeColumn = SDSColumnMetadata(columnName: "recordType", columnType: .int, columnIndex: 0)
    static let uniqueIdColumn = SDSColumnMetadata(columnName: "uniqueId", columnType: .unicodeString, columnIndex: 1)
    // Base class properties
    static let recipientMapColumn = SDSColumnMetadata(columnName: "recipientMap", columnType: .blob, columnIndex: 2)
    static let sentTimestampColumn = SDSColumnMetadata(columnName: "sentTimestamp", columnType: .int64, columnIndex: 3)

    // TODO: We should decide on a naming convention for
    //       tables that store models.
    public static let table = SDSTableMetadata(tableName: "model_TSRecipientReadReceipt", columns: [
        recordTypeColumn,
        uniqueIdColumn,
        recipientMapColumn,
        sentTimestampColumn
        ])

}

// MARK: - Deserialization

extension TSRecipientReadReceiptSerializer {
    // This method defines how to deserialize a model, given a
    // database row.  The recordType column is used to determine
    // the corresponding model class.
    class func sdsDeserialize(statement: SelectStatement) throws -> TSRecipientReadReceipt {

        if OWSIsDebugBuild() {
            guard statement.columnNames == table.selectColumnNames else {
                owsFailDebug("Unexpected columns: \(statement.columnNames) != \(table.selectColumnNames)")
                throw SDSError.invalidResult
            }
        }

        // SDSDeserializer is used to convert column values into Swift values.
        let deserializer = SDSDeserializer(sqliteStatement: statement.sqliteStatement)
        let recordTypeValue = try deserializer.int(at: 0)
        guard let recordType = SDSRecordType(rawValue: UInt(recordTypeValue)) else {
            owsFailDebug("Invalid recordType: \(recordTypeValue)")
            throw SDSError.invalidResult
        }
        switch recordType {
        case .recipientReadReceipt:

            let uniqueId = try deserializer.string(at: uniqueIdColumn.columnIndex)
            let recipientMapSerialized: Data = try deserializer.blob(at: recipientMapColumn.columnIndex)
            let recipientMap: [String: NSNumber] = try SDSDeserializer.unarchive(recipientMapSerialized)
            let sentTimestamp = try deserializer.uint64(at: sentTimestampColumn.columnIndex)

/* Suggested Initializer

- (instancetype)initWithUniqueId:(NSString *)uniqueId
                     recipientMap:(NSDictionary<NSString *,NSNumber *> *)recipientMap
                    sentTimestamp:(unsigned long long)sentTimestamp
NS_DESIGNATED_INITIALIZER
NS_SWIFT_NAME(init(uniqueId:recipientMap:sentTimestamp:));
*/
            return TSRecipientReadReceipt(uniqueId: uniqueId,
                                          recipientMap: recipientMap,
                                          sentTimestamp: sentTimestamp)

        default:
            owsFail("Invalid record type \(recordType)")
        }
    }
}

// MARK: - Save/Remove/Update

@objc
extension TSRecipientReadReceipt {
    @objc
    public func anySave(transaction: SDSAnyWriteTransaction) {
        switch transaction.writeTransaction {
        case .yapWrite(let ydbTransaction):
            save(with: ydbTransaction)
        case .grdbWrite(let grdbTransaction):
            SDSSerialization.save(entity: self, transaction: grdbTransaction)
        }
    }

    @objc
    public func anyRemove(transaction: SDSAnyWriteTransaction) {
        switch transaction.writeTransaction {
        case .yapWrite(let ydbTransaction):
            remove(with: ydbTransaction)
        case .grdbWrite(let grdbTransaction):
            SDSSerialization.delete(entity: self, transaction: grdbTransaction)
        }
    }
}

// TODO: Add remove/delete method.

// MARK: - Fetch

// This category defines various fetch methods.
//
// TODO: We may eventually want to define some combination of:
//
// * fetchCursor, fetchOne, fetchAll, etc. (ala GRDB)
// * Optional "where clause" parameters for filtering.
// * Async flavors with completions.
//
// TODO: I've defined flavors that take a read transation or SDSDatabaseStorage.
//       We might want only the former.  Or we might take a "connection" if we
//       end up having that class.
@objc
extension TSRecipientReadReceipt {
    @objc
    public class func anyFetchAll(databaseStorage: SDSDatabaseStorage) -> [TSRecipientReadReceipt] {
        var result = [TSRecipientReadReceipt]()
        databaseStorage.readSwallowingErrors { (transaction) in
            result += anyFetchAll(transaction: transaction)
        }
        return result
    }

    @objc
    public class func anyFetchAll(transaction: SDSAnyReadTransaction) -> [TSRecipientReadReceipt] {
        var result = [TSRecipientReadReceipt]()
        if let grdbTransaction = transaction.transitional_grdbReadTransaction {
            result += SDSSerialization.fetchAll(tableMetadata: TSRecipientReadReceiptSerializer.table,
                                                uniqueIdColumnName: TSRecipientReadReceiptSerializer.uniqueIdColumn.columnName,
                                                transaction: grdbTransaction,
                                                deserialize: { (statement) in
                                                    return try TSRecipientReadReceiptSerializer.sdsDeserialize(statement: statement)
            })
        } else if let ydbTransaction = transaction.transitional_yapReadTransaction {
            TSRecipientReadReceipt.enumerateCollectionObjects(with: ydbTransaction) { (object, _) in
                guard let model = object as? TSRecipientReadReceipt else {
                    owsFailDebug("unexpected object: \(type(of: object))")
                    return
                }
                result.append(model)
            }
        } else {
            owsFailDebug("Invalid transaction")
        }
        return result
    }
}

// TODO: Add remove/delete method.

// MARK: - SDSSerializer

// The SDSSerializer protocol specifies how to insert and update the
// row that corresponds to this model.
class TSRecipientReadReceiptSerializer: SDSSerializer {

    private let model: TSRecipientReadReceipt
    public required init(model: TSRecipientReadReceipt) {
        self.model = model
    }

    public func serializableColumnTableMetadata() -> SDSTableMetadata {
        return TSRecipientReadReceiptSerializer.table
    }

    public func insertColumnNames() -> [String] {
        // When we insert a new row, we include the following columns:
        //
        // * "record type"
        // * "unique id"
        // * ...all columns that we set when updating.
        return [
            TSRecipientReadReceiptSerializer.recordTypeColumn.columnName,
            uniqueIdColumnName()
            ] + updateColumnNames()

    }

    public func insertColumnValues() -> [DatabaseValueConvertible] {
        let result: [DatabaseValueConvertible] = [
            SDSRecordType.recipientReadReceipt.rawValue
            ] + [uniqueIdColumnValue()] + updateColumnValues()
        if OWSIsDebugBuild() {
            if result.count != insertColumnNames().count {
                owsFailDebug("Update mismatch: \(result.count) != \(insertColumnNames().count)")
            }
        }
        return result
    }

    public func updateColumnNames() -> [String] {
        return [
            TSRecipientReadReceiptSerializer.recipientMapColumn,
            TSRecipientReadReceiptSerializer.sentTimestampColumn
            ].map { $0.columnName }
    }

    public func updateColumnValues() -> [DatabaseValueConvertible] {
        let result: [DatabaseValueConvertible] = [
            SDSDeserializer.archive(self.model.recipientMap) ?? DatabaseValue.null,
            self.model.sentTimestamp

        ]
        if OWSIsDebugBuild() {
            if result.count != updateColumnNames().count {
                owsFailDebug("Update mismatch: \(result.count) != \(updateColumnNames().count)")
            }
        }
        return result
    }

    public func uniqueIdColumnName() -> String {
        return TSRecipientReadReceiptSerializer.uniqueIdColumn.columnName
    }

    // TODO: uniqueId is currently an optional on our models.
    //       We should probably make the return type here String?
    public func uniqueIdColumnValue() -> DatabaseValueConvertible {
        // FIXME remove force unwrap
        return model.uniqueId!
    }
}
