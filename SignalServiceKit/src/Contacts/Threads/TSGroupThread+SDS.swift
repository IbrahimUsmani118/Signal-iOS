//
//  Copyright (c) 2019 Open Whisper Systems. All rights reserved.
//

import Foundation
import GRDBCipher
import SignalCoreKit

// NOTE: This file is generated by /Users/matthew/code/workspace/ows/Signal-iOS-2/Scripts/sds_codegen/sds_generate.py.
// Do not manually edit it, instead run `sds_codegen.sh`.

// MARK: - SDSSerializer

// The SDSSerializer protocol specifies how to insert and update the
// row that corresponds to this model.
class TSGroupThreadSerializer: TSThreadSerializer {

    private let model: TSGroupThread
    required init(model: TSGroupThread) {
        self.model = model
        super.init(model: model)
    }

    public required init(model: TSThread) {
        fatalError("init(model:) has not been implemented")
    }

    public override func insertColumnNames() -> [String] {
        // When we insert a new row, we include the following columns:
        //
        // * "record type"
        // * "unique id"
        // * ...all columns that we set when updating.
        return [
            TSGroupThreadSerializer.recordTypeColumn.columnName,
            uniqueIdColumnName()
            ] + updateColumnNames()

    }

    public override func insertColumnValues() -> [DatabaseValueConvertible] {
        let result: [DatabaseValueConvertible] = [
            SDSRecordType.groupThread.rawValue
            ] + [uniqueIdColumnValue()] + updateColumnValues()
        if OWSIsDebugBuild() {
            if result.count != insertColumnNames().count {
                owsFailDebug("Update mismatch: \(result.count) != \(insertColumnNames().count)")
            }
        }
        return result
    }

    public override func updateColumnNames() -> [String] {
        return [
            TSThreadSerializer.archivalDateColumn,
            TSThreadSerializer.archivedAsOfMessageSortIdColumn,
            TSThreadSerializer.conversationColorNameColumn,
            TSThreadSerializer.creationDateColumn,
            TSThreadSerializer.isArchivedByLegacyTimestampForSortingColumn,
            TSThreadSerializer.lastMessageDateColumn,
            TSThreadSerializer.messageDraftColumn,
            TSThreadSerializer.mutedUntilDateColumn,
            TSThreadSerializer.shouldThreadBeVisibleColumn,
            TSThreadSerializer.groupModelColumn
            ].map { $0.columnName }
    }

    public override func updateColumnValues() -> [DatabaseValueConvertible] {
        let result: [DatabaseValueConvertible] = [
            self.model.archivalDate ?? DatabaseValue.null,
            self.model.archivedAsOfMessageSortId ?? DatabaseValue.null,
            DatabaseValue.null, // FIXME self.model.conversationColorName must conform to DatabaseValueConvertible
            self.model.creationDate,
            self.model.isArchivedByLegacyTimestampForSorting,
            self.model.lastMessageDate ?? DatabaseValue.null,
            self.model.messageDraft ?? DatabaseValue.null,
            self.model.mutedUntilDate ?? DatabaseValue.null,
            self.model.shouldThreadBeVisible,
            DatabaseValue.null // FIXME self.model.groupModel must conform to DatabaseValueConvertible

        ]
        if OWSIsDebugBuild() {
            if result.count != updateColumnNames().count {
                owsFailDebug("Update mismatch: \(result.count) != \(updateColumnNames().count)")
            }
        }
        return result
    }
}
