// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: StorageService.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//
//  Copyright (c) 2019 Open Whisper Systems. All rights reserved.

/// iOS - since we use a modern proto-compiler, we must specify
/// the legacy proto format.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct StorageServiceProtos_Contact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// @required
  var key: Data {
    get {return _key ?? SwiftProtobuf.Internal.emptyData}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  /// @required
  var value: Data {
    get {return _value ?? SwiftProtobuf.Internal.emptyData}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _key: Data? = nil
  fileprivate var _value: Data? = nil
}

struct StorageServiceProtos_Contacts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Corresponds to the requested
  var contacts: [StorageServiceProtos_Contact] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StorageServiceProtos_ContactsManifest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// @required
  var version: UInt64 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  /// @required
  var value: Data {
    get {return _value ?? SwiftProtobuf.Internal.emptyData}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt64? = nil
  fileprivate var _value: Data? = nil
}

struct StorageServiceProtos_ReadOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readKey: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StorageServiceProtos_WriteOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var manifest: StorageServiceProtos_ContactsManifest {
    get {return _storage._manifest ?? StorageServiceProtos_ContactsManifest()}
    set {_uniqueStorage()._manifest = newValue}
  }
  /// Returns true if `manifest` has been explicitly set.
  var hasManifest: Bool {return _storage._manifest != nil}
  /// Clears the value of `manifest`. Subsequent reads from it will return its default value.
  mutating func clearManifest() {_uniqueStorage()._manifest = nil}

  var insertContact: [StorageServiceProtos_Contact] {
    get {return _storage._insertContact}
    set {_uniqueStorage()._insertContact = newValue}
  }

  var deleteKey: [Data] {
    get {return _storage._deleteKey}
    set {_uniqueStorage()._deleteKey = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Placeholder record protos, these are serialized, encrypted, and
/// set in the Contact and ContactsManifest value fields defined above
///
/// We need to decide what contact data we'd actually like to sync
struct StorageServiceProtos_ContactRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// @required
  var key: Data {
    get {return _key ?? SwiftProtobuf.Internal.emptyData}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  var serviceUuid: String {
    get {return _serviceUuid ?? String()}
    set {_serviceUuid = newValue}
  }
  /// Returns true if `serviceUuid` has been explicitly set.
  var hasServiceUuid: Bool {return self._serviceUuid != nil}
  /// Clears the value of `serviceUuid`. Subsequent reads from it will return its default value.
  mutating func clearServiceUuid() {self._serviceUuid = nil}

  var serviceE164: String {
    get {return _serviceE164 ?? String()}
    set {_serviceE164 = newValue}
  }
  /// Returns true if `serviceE164` has been explicitly set.
  var hasServiceE164: Bool {return self._serviceE164 != nil}
  /// Clears the value of `serviceE164`. Subsequent reads from it will return its default value.
  mutating func clearServiceE164() {self._serviceE164 = nil}

  var profileName: String {
    get {return _profileName ?? String()}
    set {_profileName = newValue}
  }
  /// Returns true if `profileName` has been explicitly set.
  var hasProfileName: Bool {return self._profileName != nil}
  /// Clears the value of `profileName`. Subsequent reads from it will return its default value.
  mutating func clearProfileName() {self._profileName = nil}

  var profileAvatar: Data {
    get {return _profileAvatar ?? SwiftProtobuf.Internal.emptyData}
    set {_profileAvatar = newValue}
  }
  /// Returns true if `profileAvatar` has been explicitly set.
  var hasProfileAvatar: Bool {return self._profileAvatar != nil}
  /// Clears the value of `profileAvatar`. Subsequent reads from it will return its default value.
  mutating func clearProfileAvatar() {self._profileAvatar = nil}

  var profileKey: Data {
    get {return _profileKey ?? SwiftProtobuf.Internal.emptyData}
    set {_profileKey = newValue}
  }
  /// Returns true if `profileKey` has been explicitly set.
  var hasProfileKey: Bool {return self._profileKey != nil}
  /// Clears the value of `profileKey`. Subsequent reads from it will return its default value.
  mutating func clearProfileKey() {self._profileKey = nil}

  var conversationColor: String {
    get {return _conversationColor ?? String()}
    set {_conversationColor = newValue}
  }
  /// Returns true if `conversationColor` has been explicitly set.
  var hasConversationColor: Bool {return self._conversationColor != nil}
  /// Clears the value of `conversationColor`. Subsequent reads from it will return its default value.
  mutating func clearConversationColor() {self._conversationColor = nil}

  var conversationTimer: UInt32 {
    get {return _conversationTimer ?? 0}
    set {_conversationTimer = newValue}
  }
  /// Returns true if `conversationTimer` has been explicitly set.
  var hasConversationTimer: Bool {return self._conversationTimer != nil}
  /// Clears the value of `conversationTimer`. Subsequent reads from it will return its default value.
  mutating func clearConversationTimer() {self._conversationTimer = nil}

  var notificationTone: String {
    get {return _notificationTone ?? String()}
    set {_notificationTone = newValue}
  }
  /// Returns true if `notificationTone` has been explicitly set.
  var hasNotificationTone: Bool {return self._notificationTone != nil}
  /// Clears the value of `notificationTone`. Subsequent reads from it will return its default value.
  mutating func clearNotificationTone() {self._notificationTone = nil}

  var identityKey: Data {
    get {return _identityKey ?? SwiftProtobuf.Internal.emptyData}
    set {_identityKey = newValue}
  }
  /// Returns true if `identityKey` has been explicitly set.
  var hasIdentityKey: Bool {return self._identityKey != nil}
  /// Clears the value of `identityKey`. Subsequent reads from it will return its default value.
  mutating func clearIdentityKey() {self._identityKey = nil}

  var verified: Bool {
    get {return _verified ?? false}
    set {_verified = newValue}
  }
  /// Returns true if `verified` has been explicitly set.
  var hasVerified: Bool {return self._verified != nil}
  /// Clears the value of `verified`. Subsequent reads from it will return its default value.
  mutating func clearVerified() {self._verified = nil}

  var blocked: Bool {
    get {return _blocked ?? false}
    set {_blocked = newValue}
  }
  /// Returns true if `blocked` has been explicitly set.
  var hasBlocked: Bool {return self._blocked != nil}
  /// Clears the value of `blocked`. Subsequent reads from it will return its default value.
  mutating func clearBlocked() {self._blocked = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _key: Data? = nil
  fileprivate var _serviceUuid: String? = nil
  fileprivate var _serviceE164: String? = nil
  fileprivate var _profileName: String? = nil
  fileprivate var _profileAvatar: Data? = nil
  fileprivate var _profileKey: Data? = nil
  fileprivate var _conversationColor: String? = nil
  fileprivate var _conversationTimer: UInt32? = nil
  fileprivate var _notificationTone: String? = nil
  fileprivate var _identityKey: Data? = nil
  fileprivate var _verified: Bool? = nil
  fileprivate var _blocked: Bool? = nil
}

struct StorageServiceProtos_ManifestRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// @required
  var version: UInt64 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var keys: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt64? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "StorageServiceProtos"

extension StorageServiceProtos_Contact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Contact"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._key)
      case 2: try decoder.decodeSingularBytesField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StorageServiceProtos_Contact, rhs: StorageServiceProtos_Contact) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StorageServiceProtos_Contacts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Contacts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contacts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.contacts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contacts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StorageServiceProtos_Contacts, rhs: StorageServiceProtos_Contacts) -> Bool {
    if lhs.contacts != rhs.contacts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StorageServiceProtos_ContactsManifest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContactsManifest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._version)
      case 2: try decoder.decodeSingularBytesField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StorageServiceProtos_ContactsManifest, rhs: StorageServiceProtos_ContactsManifest) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StorageServiceProtos_ReadOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReadOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "readKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.readKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.readKey.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.readKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StorageServiceProtos_ReadOperation, rhs: StorageServiceProtos_ReadOperation) -> Bool {
    if lhs.readKey != rhs.readKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StorageServiceProtos_WriteOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WriteOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "manifest"),
    2: .same(proto: "insertContact"),
    3: .same(proto: "deleteKey"),
  ]

  fileprivate class _StorageClass {
    var _manifest: StorageServiceProtos_ContactsManifest? = nil
    var _insertContact: [StorageServiceProtos_Contact] = []
    var _deleteKey: [Data] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _manifest = source._manifest
      _insertContact = source._insertContact
      _deleteKey = source._deleteKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._manifest)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._insertContact)
        case 3: try decoder.decodeRepeatedBytesField(value: &_storage._deleteKey)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._manifest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._insertContact.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._insertContact, fieldNumber: 2)
      }
      if !_storage._deleteKey.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._deleteKey, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StorageServiceProtos_WriteOperation, rhs: StorageServiceProtos_WriteOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._manifest != rhs_storage._manifest {return false}
        if _storage._insertContact != rhs_storage._insertContact {return false}
        if _storage._deleteKey != rhs_storage._deleteKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StorageServiceProtos_ContactRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContactRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "serviceUuid"),
    3: .same(proto: "serviceE164"),
    4: .same(proto: "profileName"),
    5: .same(proto: "profileAvatar"),
    6: .same(proto: "profileKey"),
    7: .same(proto: "conversationColor"),
    8: .same(proto: "conversationTimer"),
    9: .same(proto: "notificationTone"),
    10: .same(proto: "identityKey"),
    11: .same(proto: "verified"),
    12: .same(proto: "blocked"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._key)
      case 2: try decoder.decodeSingularStringField(value: &self._serviceUuid)
      case 3: try decoder.decodeSingularStringField(value: &self._serviceE164)
      case 4: try decoder.decodeSingularStringField(value: &self._profileName)
      case 5: try decoder.decodeSingularBytesField(value: &self._profileAvatar)
      case 6: try decoder.decodeSingularBytesField(value: &self._profileKey)
      case 7: try decoder.decodeSingularStringField(value: &self._conversationColor)
      case 8: try decoder.decodeSingularUInt32Field(value: &self._conversationTimer)
      case 9: try decoder.decodeSingularStringField(value: &self._notificationTone)
      case 10: try decoder.decodeSingularBytesField(value: &self._identityKey)
      case 11: try decoder.decodeSingularBoolField(value: &self._verified)
      case 12: try decoder.decodeSingularBoolField(value: &self._blocked)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._serviceUuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._serviceE164 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._profileName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._profileAvatar {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = self._profileKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    if let v = self._conversationColor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._conversationTimer {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._notificationTone {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._identityKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 10)
    }
    if let v = self._verified {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._blocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StorageServiceProtos_ContactRecord, rhs: StorageServiceProtos_ContactRecord) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._serviceUuid != rhs._serviceUuid {return false}
    if lhs._serviceE164 != rhs._serviceE164 {return false}
    if lhs._profileName != rhs._profileName {return false}
    if lhs._profileAvatar != rhs._profileAvatar {return false}
    if lhs._profileKey != rhs._profileKey {return false}
    if lhs._conversationColor != rhs._conversationColor {return false}
    if lhs._conversationTimer != rhs._conversationTimer {return false}
    if lhs._notificationTone != rhs._notificationTone {return false}
    if lhs._identityKey != rhs._identityKey {return false}
    if lhs._verified != rhs._verified {return false}
    if lhs._blocked != rhs._blocked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StorageServiceProtos_ManifestRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ManifestRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "keys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._version)
      case 2: try decoder.decodeRepeatedBytesField(value: &self.keys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.keys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StorageServiceProtos_ManifestRecord, rhs: StorageServiceProtos_ManifestRecord) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
